KMD
00000000:             ;                                 ;by default it will branch to label 'part1'
00000000:             ; 
00000000: EA0000DF    ; B part3; part1 or part2 or part3
00000004:             ; 
00000004:             ; 
00000004:             ; ;;;   Comment out the "SVC 2" lines at the end to test all fast
00000004:             ; ;;;     Note that part2 reuses some functionality from part1 (with links)
00000004:             ; ;;;     This is against the spec but, I learnt more, which is why I'm here right
00000004:             ;         
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068:             ; 
00000068: 20 3E 3E 20 ; is              DEFB    " >> is \0"
0000006C: 69 73 20 00 ; 
00000070:             ;         ALIGN
00000070: 54 68 65 20 ; strsize         DEFB    "The length of string >> \0 "
00000074: 6C 65 6E 67 ; 
00000078: 74 68 20 6F ; 
0000007C: 66 20 73 74 ; 
00000080: 72 69 6E 67 ; 
00000084: 20 3E 3E 20 ; 
00000088: 00 20       ; 
0000008C:             ;         ALIGN
0000008C:             ; 
0000008C: 73 65 76 65 ; s1      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 73 69 78 00 ; s2      DEFB "six\0"
00000098:             ;         ALIGN
00000098: 66 69 76 65 ; s3      DEFB "five\0"
0000009C: 00          ; 
000000A0:             ;         ALIGN
000000A0: 66 6F 75 72 ; s4      DEFB "four\0"
000000A4: 00          ; 
000000A8:             ;         ALIGN
000000A8: 74 68 72 65 ; s5      DEFB "three\0"
000000AC: 65 00       ; 
000000B0:             ;         ALIGN
000000B0: 74 77 6F 00 ; s6      DEFB "two\0"
000000B4:             ;         ALIGN
000000B4: 6F 6E 65 00 ; s7      DEFB "one\0"
000000B8:             ;         ALIGN
000000B8: 43 4F 4D 50 ; s8      DEFB "COMP15111 \0"
000000BC: 31 35 31 31 ; 
000000C0: 31 20 00    ; 
000000C4:             ;         ALIGN
000000C4: 46 75 6E 64 ; s9      DEFB "Fundamentals of Computer Architecture\0"
000000C8: 61 6D 65 6E ; 
000000CC: 74 61 6C 73 ; 
000000D0: 20 6F 66 20 ; 
000000D4: 43 6F 6D 70 ; 
000000D8: 75 74 65 72 ; 
000000DC: 20 41 72 63 ; 
000000E0: 68 69 74 65 ; 
000000E4: 63 74 75 72 ; 
000000E8: 65 00       ; 
000000EC:             ;         ALIGN
000000EC:             ; 
000000EC: 50 41 55 53 ; pause     DEFB    "PAUSE EXECUTION"
000000F0: 45 20 45 58 ; 
000000F4: 45 43 55 54 ; 
000000F8: 49 4F 4E    ; 
000000FC:             ;         ALIGN
000000FC:             ; 
000000FC:             ; 
000000FC:             ; printstring
000000FC: E1A00001    ;         MOV  R0,R1
00000100: EF000003    ;         SVC  3
00000104: E3A0000A    ;         MOV  R0, #10
00000108: EF000000    ;         SVC  0
0000010C: E1A0F00E    ;         MOV  PC, LR
00000110:             ; 
00000110:             ; 
00000110:             ; 
00000110:             ; ;************************** part 1 **************************
00000110:             ; stringLength
00000110:             ; 
00000110:             ; ; R2 must contain the length of the string.
00000110:             ; ;by default R2 contains integer value zero, you need to write a
00000110:             ; ;piece of assembly code to calculate the length of the string pointed by R1
00000110:             ;                                 ;your code goes here
00000110:             ; 
00000110:             ;         ;;  MOV R2, #4294967295
00000110:             ;         ;;  STR R3, all_ones            ;;  Doesn't work
00000110:             ; 
00000110:             ;         ;;  CMP and AND doesn't work, as cannot access CPSR register (Bennett restriction)
00000110:             ;         
00000110:             ;         ;;  Other ideas:
00000110:             ;         ;;    1. AND each bit individually
00000110:             ;         ;;    2. Bitshift right 8 times, AND the last position with 1
00000110:             ;         ;;              - This is a big reverse engineering effort, but learn some Assembly I g
                      ; uess
00000110:             ; 
00000110:             ;         ;;  But LSR also doesn't work in Bennett
00000110:             ;         ;;  Nonetheless they all go back to CMP
00000110:             ; 
00000110:             ;         ;;  Lecture notes imply some branch instructions can indirectly access CPSR register.
00000110:             ;         
00000110:             ;         ;;  The truth is, I don't like videos/powerpoints, so I have only been reading course t
                      ; exts.
00000110:             ; 
00000110:             ;         ;;  But you have to just follow the template course, because Bennett is a limited emula
                      ; tor.
00000110:             ;         ;;      Understand Christos' dismay with Bennett now.
00000110:             ; 
00000110:             ; 
00000110:             ; ;;;  A CALL TO `stringLength` EXITS WITH
00000110:             ; ;;;    length as integer in r2
00000110:             ; ;;;    position of last byte in r3
00000110:             ; 
00000110:             ;         
00000110: E3A02000    ;   MOV R2,#0           ;len = 0
00000114:             ;                         ;while string[len:]:
00000114:             ;                         ;   len =len+ 1
00000114:             ; 
00000114:             ;         ;;  contents of R1 = string
00000114:             ; 
00000114:             ;         
00000114:             ; 
00000114: E3A02000    ;         MOV R2, #0
00000118:             ; 
00000118:             ;         
00000118:             ; byte_loop_count
00000118:             ;         
00000118: E2822001    ;         ADD R2, R2, #1          ; add 1 to r2
0000011C: E4D18001    ;         LDRB R8, [R1], #1       ; load byte from r1 to r8 and increment R1
00000120: E3580000    ;         CMP R8, #0              ; compare r8 with 0, store result in CPSR
00000124: E1A03001    ;         MOV R3, R1              ; store for later reuse
00000128: 1AFFFFFA    ;         BNE byte_loop_count     ; using CPSR comparison bit, branch/not to byte_loop_count
0000012C:             ; 
0000012C: E2422001    ;         ADD R2, R2, #-1         ; deincrement the extra counter (Ahmed gave this away in lectur
                      ; e)
00000130: E2433001    ;         ADD R3, R3, #-1         ; deincrement the final byte position
00000134:             ;         
00000134:             ; ;R2 must contain the length of the string
00000134:             ; ; don't remove these lines
00000134: E1A00002    ;   MOV  R0,R2
00000138: EF000004    ;   SVC  4
0000013C: E3A0000A    ;   MOV  R0, #10
00000140: EF000000    ;   SVC  0
00000144: E1A0F00E    ;   MOV  PC, LR
00000148:             ; 
00000148:             ; 
00000148:             ; 
00000148:             ; ;************************** part 2 **************************
00000148:             ; printstringReverse
00000148:             ; 
00000148:             ; 
00000148:             ; ;;; ;;;;  Second attempt below - with actual stack,
00000148:             ; ;;; ;;;;    because thinking of taking microcontrollers course (but aren't they programmed in C
                      ; ?)
00000148:             ; 
00000148:             ; 
00000148:             ; ;;; ;;;   Plan:
00000148:             ; 
00000148:             ; ;;; ;;;   1. add chars to stack, compare with zero, loop if not zero, iterate quantity
00000148:             ; ;;; ;;;   2. pop chars from stack, decrement quantity, compare with zero
00000148:             ; 
00000148:             ; ;;; ;;;   Psuedoinstruction PUSH & POP a bit inappropriate because we are operating on bytes...
00000148:             ; ;;; ;;;   There could be a PUSHB or POPB but instead we have LDRB manipulating addresses too...
00000148:             ; ;;; ;;;   OK PUSH {R1} doesn't work in Bennett - it only changes the stack pointer?
00000148:             ; ;;; ;;;   Aw hell, we're Bennett guinae pigs.
00000148:             ; 
00000148:             ; 
00000148:             ; ;;; ;;;   It seems weird to put addresses on the stack, but LDRB only works with addresses...
00000148:             ; ;;; ;;;   Will use AND to put actual values on stack, feels more sane.
00000148:             ;         
00000148:             ; 
00000148:             ; 
00000148:             ; ;;; ;;;   OK THIS IS THE TRICK TO MAKING PUSH AND POP ACTUALLY WORK WITH BENNETT
00000148:             ; 
00000148: E3A0DB02    ; MOV R13, #2048  ;  set the stack pointer to an empty address
0000014C: E3A02000    ; MOV R2, #0      ;  reset the byte iteration counter
00000150:             ;         
00000150:             ; byte_loop_push
00000150:             ; 
00000150:             ;         ;  LDRB SHOULD ONLY LOAD 1 BYTE, LIKE RISC-V - NO ADDRESS MANIPULATION  
00000150:             ;         
00000150: E7D10002    ;         LDRB R0, [R1,R2]                ;  r1 contains address, load 4 LSBs of [ r1 address loc
                      ; ation + r2 bytes ] to r0
00000154: E2822001    ;         ADD R2, R2, #1          ;  add 1 to r2, to load next char
00000158:             ; 
00000158: E92D0001    ;         PUSH {R0}
0000015C:             ;         
0000015C:             ;         ;; verbose, manual implementation of PUSH {R1}
0000015C:             ; 
0000015C:             ;         ;; ADD R13, R13, #-4    ;  move stack pointer backwards by 4 bytes
0000015C:             ;         ;; STR R0, [R13]                ;  store contents of r0 (an address) to location of r13
0000015C:             ;         
0000015C:             ;         ;; SVC 0                        ;  FOR DEBUGGING: Output byte
0000015C:             ; 
0000015C: E3500000    ;         CMP R0, #0              ;  compare r4 with 0, store result in CPSR
00000160: 1AFFFFFA    ;         BNE byte_loop_push      ;  using CPSR comparison bit, branch/don't to byte_loop_push
00000164:             ; 
00000164:             ; 
00000164:             ; 
00000164:             ; 
00000164:             ;         
00000164:             ; pop_last_stack_value
00000164:             ; 
00000164: E8BD0001    ;         POP {R0}
00000168:             ;         
00000168:             ;         ;; LDR R0, [R13]                ;  load contents of r13 to r0, to pop the last 0 from s
                      ; tack
00000168:             ;         ;; ADD R13, R13, #4     ;  add 4 to r13
00000168:             ; 
00000168:             ;         
00000168:             ; byte_loop_pop
00000168:             ;         
00000168:             ;         ;; verbose, manual implementation of POP {R1}
00000168:             ;         
00000168:             ;         ;; LDR R0, [R13]                ;  load contents of r13 to r0
00000168:             ;         ;; ADD R13, R13, #4     ;  add 4 to r13 (move stack pointer)
00000168:             ; 
00000168: E8BD0001    ;         POP {R0}
0000016C:             ; 
0000016C:             ;         
0000016C: EF000000    ;         SVC 0                   
00000170:             ;         
00000170: E35D0B02    ;         CMP R13, #2048          ;  compare r13 with top of stack address, store result in CPSR
00000174: 1AFFFFFB    ;         BNE byte_loop_pop       ;  using CPSR comparison bit, branch/don't to byte_loop_pop
00000178:             ; 
00000178:             ;         
00000178: E4530001    ;         LDRB R0, [R3], #-1      ;  load final char
0000017C:             ;         ;; SVC 0
0000017C:             ; 
0000017C: E3A0000A    ;         MOV  R0, #10            ;  output newline
00000180: EF000000    ;         SVC  0  
00000184:             ;         
00000184:             ;         
00000184:             ; 
00000184:             ;         
00000184:             ; 
00000184:             ; ;;;;;;;;;;; ;;; First fully functional attempt below, but no stack
00000184:             ; ;;;;;;;;;;; ;;; LDRB does indeed suck
00000184:             ;         
00000184:             ; 
00000184:             ; ;;;   Note that this function expects that the string to print is in R1
00000184:             ; ;;;   And that R2 is unused
00000184:             ;         
00000184:             ; 
00000184:             ; ;;      MOV R12, LR             ;  put address of callee in R12
00000184:             ; 
00000184:             ; ;;      ADR LR, reverse_process ;  put address of reverse_process in LR (for later return)
00000184:             ; 
00000184:             ; ;;      B stringLength          ;  branch off to get the string length
00000184:             ;         
00000184:             ; ;; reverse_process                      ;  branches back to here
00000184:             ; 
00000184:             ; ;;      ;;;   R3 now contains the address of the end of the string
00000184:             ; ;;      ;;;   R2 now contains the length of the string
00000184:             ; 
00000184:             ; ;;      MOV r4, r2              ;  copy r2 to r4 (contains string length)
00000184:             ;         
00000184:             ; ;;         ;; ADR R0, pause           ; move PC to location of op4
00000184:             ; ;;         ;; SVC 3                   ; output r0 as string     
00000184:             ;         
00000184:             ; ;; byte_loop_out
00000184:             ; 
00000184:             ; 
00000184:             ; ;;      ;; LDRB R0, [R3], #-1   ; #-1 deincrement address within r3 by 1, load contents of r3 t
                      ; o r0
00000184:             ; ;;      LDRB R0, [R3], #-1      ;  Should be 2 separate instructions, arguably - more RISC like
00000184:             ; ;;      SVC 0                   
00000184:             ; 
00000184:             ; ;;      ADD R4, R4, #-1
00000184:             ;         
00000184:             ; ;;      CMP R4, #0              ;  compare r4 with 0, store result in CPSR
00000184:             ; ;;      BNE byte_loop_out       ;  using CPSR comparison bit, branch/don't to byte_loop_out
00000184:             ; 
00000184:             ; ;;      LDRB R0, [R3], #-1      ;  load final char
00000184:             ; ;;      SVC 0
00000184:             ; 
00000184:             ; ;;      MOV  R0, #10            ;  output newline
00000184:             ; ;;      SVC  0  
00000184:             ;         
00000184:             ;         
00000184:             ; 
00000184:             ; ;;      MOV LR, R12             ;  prepare to branch back to callee
00000184:             ;         
00000184:             ; 
00000184:             ; ;;; ;;;;;;;;;;;;;;;;;;;;  END OF FIRST ATTEMPT
00000184:             ; 
00000184:             ;         
00000184:             ; 
00000184:             ; ; don't remove these lines
00000184: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
00000188: EF000000    ;         SVC  0          ; given
0000018C: E1A0F00E    ;         MOV  PC, LR     ; given
00000190:             ; 
00000190:             ; ;************************** part 3 ***************************
00000190:             ; stringCopy
00000190:             ;                                         ;Your code goes here replacing the 2 lines given below
00000190:             ; 
00000190:             ;         
00000190:             ; ;;;   RISC-V might be the future, ARM (and Intel) might be totally screwed someday.
00000190:             ; ;;;     There is no advantage to commit to it unless they choose to fund me (and potentially
00000190:             ; ;;;     oversubscribed). I have to hedge my bets.
00000190:             ; ;;;   Also, Bennett is not a joy to work with.
00000190:             ; 
00000190:             ; stringCopy_init
00000190:             ;         
00000190: E1A0C00E    ;         MOV R12, LR             ;  put address of callee in R12 
00000194:             ;         
00000194: E24F3F66    ;         ADR R3, buffer
00000198:             ;         
00000198:             ; 
00000198:             ; byte_loop_strcopy
00000198:             ; 
00000198: E4D14001    ;         LDRB R4, [R1], #1       ;  load byte from R1 to R4 and increment R1
0000019C: E4C34001    ;         STRB R4, [R3], #1       ;  store byte from R4 to R3 and increment R3
000001A0:             ;         
000001A0:             ;         ;; MOV R0, R4
000001A0:             ;         ;; SVC 0
000001A0:             ;         
000001A0: E3540000    ;         CMP R4, #0              ;  compare r8 with 0, store result in CPSR
000001A4: 1AFFFFFB    ;         BNE byte_loop_strcopy   ;  using CPSR comparison bit, branch/not to byte_loop_count
000001A8:             ; 
000001A8:             ; 
000001A8:             ; concat_string_out_init
000001A8:             ; 
000001A8: E3A04000    ;         MOV R4, #0
000001AC: E4534001    ;         LDRB R4, [R3], #-1
000001B0:             ; 
000001B0:             ;         
000001B0:             ; byte_loop_strjoin
000001B0:             ; 
000001B0: E4D24001    ;         LDRB R4, [R2], #1       ;  load byte from R1 to R4 and increment R1
000001B4: E4C34001    ;         STRB R4, [R3], #1       ;  store byte from R4 to R3 and increment R3
000001B8:             ;         
000001B8:             ;         ;; MOV R0, R4
000001B8:             ;         ;; SVC 0
000001B8:             ;         
000001B8: E3540000    ;         CMP R4, #0              ;  compare r8 with 0, store result in CPSR
000001BC: 1AFFFFFB    ;         BNE byte_loop_strjoin   ;  using CPSR comparison bit, branch/not to byte_loop_count
000001C0:             ; 
000001C0:             ; 
000001C0:             ; 
000001C0:             ; stringCopy_ending
000001C0:             ; 
000001C0:             ;         
000001C0: E1A0E00C    ;         MOV LR, R12             ;  address of R12 in LR (prepare to branch back to callee)
000001C4:             ;         
000001C4:             ;         
000001C4:             ; 
000001C4:             ; 
000001C4:             ; ; don't remove this line
000001C4: E1A0F00E    ;   MOV  PC, LR   ; given
000001C8:             ; 
000001C8:             ; 
000001C8:             ; 
000001C8:             ; ;*********************** the various parts ********************
000001C8:             ; part1
000001C8: E24F1E16    ;   ADR R1, strsize
000001CC: E1A00001    ;   MOV  R0,R1
000001D0: EF000003    ;   SVC  3
000001D4: E24F1E15    ;   ADR R1, s1
000001D8: E1A00001    ;   MOV  R0,R1
000001DC: EF000003    ;   SVC  3
000001E0: E24F2D06    ;   ADR R2, is
000001E4: E1A00002    ;   MOV  R0,R2
000001E8: EF000003    ;   SVC  3
000001EC: E24F1F5A    ;   ADR R1, s1
000001F0: EBFFFFC6    ;   BL stringLength
000001F4:             ; 
000001F4:             ; 
000001F4: E24F1F63    ;   ADR R1, strsize
000001F8: E1A00001    ;   MOV  R0,R1
000001FC: EF000003    ;   SVC  3
00000200: E24F1F5D    ;   ADR R1, s2
00000204: E1A00001    ;   MOV  R0,R1
00000208: EF000003    ;   SVC  3
0000020C: E24F2F6B    ;   ADR R2, is
00000210: E1A00002    ;   MOV  R0,R2
00000214: EF000003    ;   SVC  3
00000218: EBFFFFBC    ;   BL stringLength
0000021C:             ; 
0000021C: E24F1F6D    ;   ADR R1, strsize
00000220: E1A00001    ;   MOV  R0,R1
00000224: EF000003    ;   SVC  3
00000228: E24F1F66    ;   ADR R1, s3
0000022C: E1A00001    ;   MOV  R0,R1
00000230: EF000003    ;   SVC  3
00000234: E24F2F75    ;   ADR R2, is
00000238: E1A00002    ;   MOV  R0,R2
0000023C: EF000003    ;   SVC  3
00000240: EBFFFFB2    ;   BL stringLength
00000244:             ; 
00000244: E24F1F77    ;   ADR R1, strsize
00000248: E1A00001    ;   MOV  R0,R1
0000024C: EF000003    ;   SVC  3
00000250: E24F1F6E    ;   ADR R1, s4
00000254: E1A00001    ;   MOV  R0,R1
00000258: EF000003    ;   SVC  3
0000025C: E24F2F7F    ;   ADR R2, is
00000260: E1A00002    ;   MOV  R0,R2
00000264: EF000003    ;   SVC  3
00000268: EBFFFFA8    ;   BL stringLength
0000026C:             ; 
0000026C: E24F1F81    ;   ADR R1, strsize
00000270: E1A00001    ;   MOV  R0,R1
00000274: EF000003    ;   SVC  3
00000278: E24F1F76    ;   ADR R1, s5
0000027C: E1A00001    ;   MOV  R0,R1
00000280: EF000003    ;   SVC  3
00000284: E24F2F89    ;   ADR R2, is
00000288: E1A00002    ;   MOV  R0,R2
0000028C: EF000003    ;   SVC  3
00000290: EBFFFF9E    ;   BL stringLength
00000294:             ; 
00000294: E24F1F8B    ;   ADR R1, strsize
00000298: E1A00001    ;   MOV  R0,R1
0000029C: EF000003    ;   SVC  3
000002A0: E24F1F7E    ;   ADR R1, s6
000002A4: E1A00001    ;   MOV  R0,R1
000002A8: EF000003    ;   SVC  3
000002AC: E24F2F93    ;   ADR R2, is
000002B0: E1A00002    ;   MOV  R0,R2
000002B4: EF000003    ;   SVC  3
000002B8: EBFFFF94    ;   BL stringLength
000002BC:             ; 
000002BC: E24F1F95    ;   ADR R1, strsize
000002C0: E1A00001    ;   MOV  R0,R1
000002C4: EF000003    ;   SVC  3
000002C8: E24F1F87    ;   ADR R1, s7
000002CC: E1A00001    ;   MOV  R0,R1
000002D0: EF000003    ;   SVC  3
000002D4: E24F2F9D    ;   ADR R2, is
000002D8: E1A00002    ;   MOV  R0,R2
000002DC: EF000003    ;   SVC  3
000002E0: EBFFFF8A    ;   BL stringLength
000002E4:             ; 
000002E4: E24F1F9F    ;   ADR R1, strsize
000002E8: E1A00001    ;   MOV  R0,R1
000002EC: EF000003    ;   SVC  3
000002F0: E24F1D09    ;   ADR R1, s8
000002F4: E1A00001    ;   MOV  R0,R1
000002F8: EF000003    ;   SVC  3
000002FC: E24F2FA7    ;   ADR R2, is
00000300: E1A00002    ;   MOV  R0,R2
00000304: EF000003    ;   SVC  3
00000308: EBFFFF80    ;   BL stringLength
0000030C:             ; 
0000030C: E24F1FA9    ;   ADR R1, strsize
00000310: E1A00001    ;   MOV  R0,R1
00000314: EF000003    ;   SVC  3
00000318: E24F1F97    ;   ADR R1, s9
0000031C: E1A00001    ;   MOV  R0,R1
00000320: EF000003    ;   SVC  3
00000324: E24F2FB1    ;   ADR R2, is
00000328: E1A00002    ;   MOV  R0,R2
0000032C: EF000003    ;   SVC  3
00000330: EBFFFF76    ;   BL stringLength
00000334: EF000002    ;   SVC 2
00000338:             ; 
00000338:             ; 
00000338: E24F1FAD    ; part2   ADR R1, s1
0000033C: EBFFFF81    ;   BL  printstringReverse
00000340: E24F1FAD    ;   ADR R1, s2
00000344: EBFFFF7F    ;   BL  printstringReverse
00000348: E24F1FAE    ;   ADR R1, s3
0000034C: EBFFFF7D    ;   BL  printstringReverse
00000350: E24F1FAE    ;   ADR R1, s4
00000354: EBFFFF7B    ;   BL  printstringReverse
00000358: E24F1FAE    ;   ADR R1, s5
0000035C: EBFFFF79    ;   BL  printstringReverse
00000360: E24F1FAE    ;   ADR R1, s6
00000364: EBFFFF77    ;   BL  printstringReverse
00000368: E24F1FAF    ;   ADR R1, s7
0000036C: EBFFFF75    ;   BL  printstringReverse
00000370: E24F1D0B    ;   ADR R1, s8
00000374: EBFFFF73    ;   BL  printstringReverse
00000378: E24F1FAF    ;   ADR R1, s9
0000037C: EBFFFF71    ;   BL  printstringReverse
00000380: EF000002    ;   SVC 2
00000384:             ; 
00000384:             ; 
00000384: E24F1FB5    ; part3   ADR R1, s8
00000388: E24F2FB3    ;   ADR R2, s9
0000038C: E24F3E39    ;   ADR R3, buffer
00000390: EBFFFF7E    ;   BL  stringCopy
00000394: E24F1FE6    ;   ADR R1, buffer
00000398: EBFFFF57    ;   BL printstring
0000039C:             ; 
0000039C: EF000002    ;   SVC 2
000003A0:             ; 
000003A0:             ; 
000003A0:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: is                                00000068  Local -- ARM
: strsize                           00000070  Local -- ARM
: s1                                0000008C  Local -- ARM
: s2                                00000094  Local -- ARM
: s3                                00000098  Local -- ARM
: s4                                000000A0  Local -- ARM
: s5                                000000A8  Local -- ARM
: s6                                000000B0  Local -- ARM
: s7                                000000B4  Local -- ARM
: s8                                000000B8  Local -- ARM
: s9                                000000C4  Local -- ARM
: pause                             000000EC  Local -- ARM
: printstring                       000000FC  Local -- ARM
: stringLength                      00000110  Local -- ARM
: byte_loop_count                   00000118  Local -- ARM
: printstringReverse                00000148  Local -- ARM
: byte_loop_push                    00000150  Local -- ARM
: pop_last_stack_value              00000164  Local -- ARM
: byte_loop_pop                     00000168  Local -- ARM
: stringCopy                        00000190  Local -- ARM
: stringCopy_init                   00000190  Local -- ARM
: byte_loop_strcopy                 00000198  Local -- ARM
: concat_string_out_init            000001A8  Local -- ARM
: byte_loop_strjoin                 000001B0  Local -- ARM
: stringCopy_ending                 000001C0  Local -- ARM
: part1                             000001C8  Local -- ARM
: part2                             00000338  Local -- ARM
: part3                             00000384  Local -- ARM
