KMD
00000000:             ; ;by default it will branch to label 'part1'
00000000:             ; 
00000000: EA00005E    ;         B part1 ; part1 or part2 or part3
00000004:             ; 
00000004:             ; 
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068:             ; 
00000068: 20 3E 3E 20 ; is              DEFB    " >> is \0"
0000006C: 69 73 20 00 ; 
00000070:             ;         ALIGN
00000070: 54 68 65 20 ; strsize         DEFB    "The length of string >> \0 "
00000074: 6C 65 6E 67 ; 
00000078: 74 68 20 6F ; 
0000007C: 66 20 73 74 ; 
00000080: 72 69 6E 67 ; 
00000084: 20 3E 3E 20 ; 
00000088: 00 20       ; 
0000008C:             ;         ALIGN
0000008C:             ; 
0000008C: 73 65 76 65 ; s1      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 73 69 78 00 ; s2      DEFB "six\0"
00000098:             ;         ALIGN
00000098: 66 69 76 65 ; s3      DEFB "five\0"
0000009C: 00          ; 
000000A0:             ;         ALIGN
000000A0: 66 6F 75 72 ; s4      DEFB "four\0"
000000A4: 00          ; 
000000A8:             ;         ALIGN
000000A8: 74 68 72 65 ; s5      DEFB "three\0"
000000AC: 65 00       ; 
000000B0:             ;         ALIGN
000000B0: 74 77 6F 00 ; s6      DEFB "two\0"
000000B4:             ;         ALIGN
000000B4: 6F 6E 65 00 ; s7      DEFB "one\0"
000000B8:             ;         ALIGN
000000B8: 43 4F 4D 50 ; s8      DEFB "COMP15111 \0"
000000BC: 31 35 31 31 ; 
000000C0: 31 20 00    ; 
000000C4:             ;         ALIGN
000000C4: 46 75 6E 64 ; s9      DEFB "Fundamentals of Computer Architecture\0"
000000C8: 61 6D 65 6E ; 
000000CC: 74 61 6C 73 ; 
000000D0: 20 6F 66 20 ; 
000000D4: 43 6F 6D 70 ; 
000000D8: 75 74 65 72 ; 
000000DC: 20 41 72 63 ; 
000000E0: 68 69 74 65 ; 
000000E4: 63 74 75 72 ; 
000000E8: 65 00       ; 
000000EC:             ;         ALIGN
000000EC:             ; 
000000EC:             ; printstring
000000EC: E1A00001    ;         MOV  R0,R1
000000F0: EF000003    ;         SVC  3
000000F4: E3A0000A    ;         MOV  R0, #10
000000F8: EF000000    ;         SVC  0
000000FC: E1A0F00E    ;         MOV  PC, LR
00000100:             ; 
00000100:             ; 
00000100:             ; 
00000100:             ; ;************************** part 1 **************************
00000100:             ; stringLength
00000100:             ; 
00000100:             ; ; R2 must contain the length of the string.
00000100:             ; ;by default R2 contains integer value zero, you need to write a
00000100:             ; ;piece of assembly code to calculate the length of the string pointed by R1
00000100:             ; ;your code goes here
00000100: E3A02000    ;   MOV R2,#0           ;len = 0
00000104:             ;                         ;while string[len:]:
00000104:             ;                         ;   len =len+ 1
00000104:             ; 
00000104:             ;         ;; contents of R1 = string
00000104:             ;         
00000104: E4D10001    ;         LDRB R0, [R1], #1
00000108: EF000000    ;         SVC 0
0000010C: E3A0000A    ;         MOV  R0, #10
00000110: EF000000    ;         SVC 0
00000114: E4D10001    ;         LDRB R0, [R1], #1
00000118: EF000000    ;         SVC 0
0000011C: E3A0000A    ;         MOV  R0, #10
00000120: EF000000    ;         SVC 0
00000124: E4D10001    ;         LDRB R0, [R1], #1
00000128: EF000000    ;         SVC 0
0000012C: E3A0000A    ;         MOV  R0, #10
00000130: EF000000    ;         SVC 0
00000134: E4D10001    ;         LDRB R0, [R1], #1
00000138: EF000000    ;         SVC 0
0000013C: E3A0000A    ;         MOV  R0, #10
00000140: EF000000    ;         SVC 0
00000144: E4D10001    ;         LDRB R0, [R1], #1
00000148: EF000000    ;         SVC 0
0000014C:             ; 
0000014C:             ; 
0000014C:             ;         
0000014C:             ; ;R2 must contain the length of the string
0000014C:             ; ; don't remove these lines
0000014C: E1A00002    ;   MOV  R0,R2
00000150: EF000004    ;   SVC  4
00000154: E3A0000A    ;   MOV  R0, #10
00000158: EF000000    ;   SVC  0
0000015C: E1A0F00E    ;   MOV  PC, LR
00000160:             ; 
00000160:             ; 
00000160:             ; 
00000160:             ; ;************************** part 2 **************************
00000160:             ; printstringReverse
00000160:             ; 
00000160:             ; ;Your code goes here replacing the 2 lines given below
00000160: E1A00001    ;   MOV  R0,R1
00000164: EF000003    ;   SVC  3
00000168:             ; 
00000168:             ; 
00000168:             ; 
00000168:             ; 
00000168:             ; 
00000168:             ; 
00000168:             ; 
00000168:             ; ; don't remove these lines
00000168: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
0000016C: EF000000    ;         SVC  0          ; given
00000170: E1A0F00E    ;         MOV  PC, LR     ; given
00000174:             ; 
00000174:             ; ;************************** part 3 ***************************
00000174:             ; stringCopy
00000174:             ; 
00000174:             ; ;Your code goes here replacing the 2 lines given below
00000174: E1A00001    ;   MOV  R0,R1
00000178: EF000003    ;   SVC  3
0000017C:             ; 
0000017C:             ; 
0000017C:             ; 
0000017C:             ; ; don't remove this line
0000017C: E1A0F00E    ;   MOV  PC, LR   ; given
00000180:             ; 
00000180:             ; 
00000180:             ; 
00000180:             ; ;*********************** the various parts ********************
00000180:             ; part1
00000180: E24F1F46    ;   ADR R1, strsize
00000184: E1A00001    ;   MOV  R0,R1
00000188: EF000003    ;   SVC  3
0000018C: E24F1F42    ;   ADR R1, s1
00000190: E1A00001    ;   MOV  R0,R1
00000194: EF000003    ;   SVC  3
00000198: E24F2F4E    ;   ADR R2, is
0000019C: E1A00002    ;   MOV  R0,R2
000001A0: EF000003    ;   SVC  3
000001A4: E24F1E12    ;   ADR R1, s1
000001A8: EBFFFFD4    ;   BL stringLength
000001AC:             ; 
000001AC:             ; 
000001AC: E24F1F51    ;   ADR R1, strsize
000001B0: E1A00001    ;   MOV  R0,R1
000001B4: EF000003    ;   SVC  3
000001B8: E24F1F4B    ;   ADR R1, s2
000001BC: E1A00001    ;   MOV  R0,R1
000001C0: EF000003    ;   SVC  3
000001C4: E24F2F59    ;   ADR R2, is
000001C8: E1A00002    ;   MOV  R0,R2
000001CC: EF000003    ;   SVC  3
000001D0: EBFFFFCA    ;   BL stringLength
000001D4:             ; 
000001D4: E24F1F5B    ;   ADR R1, strsize
000001D8: E1A00001    ;   MOV  R0,R1
000001DC: EF000003    ;   SVC  3
000001E0: E24F1E15    ;   ADR R1, s3
000001E4: E1A00001    ;   MOV  R0,R1
000001E8: EF000003    ;   SVC  3
000001EC: E24F2F63    ;   ADR R2, is
000001F0: E1A00002    ;   MOV  R0,R2
000001F4: EF000003    ;   SVC  3
000001F8: EBFFFFC0    ;   BL stringLength
000001FC:             ; 
000001FC: E24F1F65    ;   ADR R1, strsize
00000200: E1A00001    ;   MOV  R0,R1
00000204: EF000003    ;   SVC  3
00000208: E24F1E17    ;   ADR R1, s4
0000020C: E1A00001    ;   MOV  R0,R1
00000210: EF000003    ;   SVC  3
00000214: E24F2F6D    ;   ADR R2, is
00000218: E1A00002    ;   MOV  R0,R2
0000021C: EF000003    ;   SVC  3
00000220: EBFFFFB6    ;   BL stringLength
00000224:             ; 
00000224: E24F1F6F    ;   ADR R1, strsize
00000228: E1A00001    ;   MOV  R0,R1
0000022C: EF000003    ;   SVC  3
00000230: E24F1E19    ;   ADR R1, s5
00000234: E1A00001    ;   MOV  R0,R1
00000238: EF000003    ;   SVC  3
0000023C: E24F2F77    ;   ADR R2, is
00000240: E1A00002    ;   MOV  R0,R2
00000244: EF000003    ;   SVC  3
00000248: EBFFFFAC    ;   BL stringLength
0000024C:             ; 
0000024C: E24F1F79    ;   ADR R1, strsize
00000250: E1A00001    ;   MOV  R0,R1
00000254: EF000003    ;   SVC  3
00000258: E24F1E1B    ;   ADR R1, s6
0000025C: E1A00001    ;   MOV  R0,R1
00000260: EF000003    ;   SVC  3
00000264: E24F2F81    ;   ADR R2, is
00000268: E1A00002    ;   MOV  R0,R2
0000026C: EF000003    ;   SVC  3
00000270: EBFFFFA2    ;   BL stringLength
00000274:             ; 
00000274: E24F1F83    ;   ADR R1, strsize
00000278: E1A00001    ;   MOV  R0,R1
0000027C: EF000003    ;   SVC  3
00000280: E24F1F75    ;   ADR R1, s7
00000284: E1A00001    ;   MOV  R0,R1
00000288: EF000003    ;   SVC  3
0000028C: E24F2F8B    ;   ADR R2, is
00000290: E1A00002    ;   MOV  R0,R2
00000294: EF000003    ;   SVC  3
00000298: EBFFFF98    ;   BL stringLength
0000029C:             ; 
0000029C: E24F1F8D    ;   ADR R1, strsize
000002A0: E1A00001    ;   MOV  R0,R1
000002A4: EF000003    ;   SVC  3
000002A8: E24F1F7E    ;   ADR R1, s8
000002AC: E1A00001    ;   MOV  R0,R1
000002B0: EF000003    ;   SVC  3
000002B4: E24F2F95    ;   ADR R2, is
000002B8: E1A00002    ;   MOV  R0,R2
000002BC: EF000003    ;   SVC  3
000002C0: EBFFFF8E    ;   BL stringLength
000002C4:             ; 
000002C4: E24F1F97    ;   ADR R1, strsize
000002C8: E1A00001    ;   MOV  R0,R1
000002CC: EF000003    ;   SVC  3
000002D0: E24F1F85    ;   ADR R1, s9
000002D4: E1A00001    ;   MOV  R0,R1
000002D8: EF000003    ;   SVC  3
000002DC: E24F2F9F    ;   ADR R2, is
000002E0: E1A00002    ;   MOV  R0,R2
000002E4: EF000003    ;   SVC  3
000002E8: EBFFFF84    ;   BL stringLength
000002EC: EF000002    ;   SVC 2
000002F0:             ; 
000002F0:             ; 
000002F0: E24F1F9B    ; part2   ADR R1, s1
000002F4: EBFFFF99    ;   BL  printstringReverse
000002F8: E24F1F9B    ;   ADR R1, s2
000002FC: EBFFFF97    ;   BL  printstringReverse
00000300: E24F1E27    ;   ADR R1, s3
00000304: EBFFFF95    ;   BL  printstringReverse
00000308: E24F1E27    ;   ADR R1, s4
0000030C: EBFFFF93    ;   BL  printstringReverse
00000310: E24F1E27    ;   ADR R1, s5
00000314: EBFFFF91    ;   BL  printstringReverse
00000318: E24F1E27    ;   ADR R1, s6
0000031C: EBFFFF8F    ;   BL  printstringReverse
00000320: E24F1F9D    ;   ADR R1, s7
00000324: EBFFFF8D    ;   BL  printstringReverse
00000328: E24F1F9E    ;   ADR R1, s8
0000032C: EBFFFF8B    ;   BL  printstringReverse
00000330: E24F1F9D    ;   ADR R1, s9
00000334: EBFFFF89    ;   BL  printstringReverse
00000338: EF000002    ;   SVC 2
0000033C:             ; 
0000033C:             ; 
0000033C: E24F1FA3    ; part3   ADR R1, s8
00000340: E24F2FA1    ;   ADR R2, s9
00000344: E24F3FD2    ;   ADR R3, buffer
00000348: EBFFFF89    ;   BL  stringCopy
0000034C: E24F1E35    ;   ADR R1, buffer
00000350: EBFFFF65    ;   BL printstring
00000354:             ; 
00000354: EF000002    ;   SVC 2
00000358:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: is                                00000068  Local -- ARM
: strsize                           00000070  Local -- ARM
: s1                                0000008C  Local -- ARM
: s2                                00000094  Local -- ARM
: s3                                00000098  Local -- ARM
: s4                                000000A0  Local -- ARM
: s5                                000000A8  Local -- ARM
: s6                                000000B0  Local -- ARM
: s7                                000000B4  Local -- ARM
: s8                                000000B8  Local -- ARM
: s9                                000000C4  Local -- ARM
: printstring                       000000EC  Local -- ARM
: stringLength                      00000100  Local -- ARM
: printstringReverse                00000160  Local -- ARM
: stringCopy                        00000174  Local -- ARM
: part1                             00000180  Local -- ARM
: part2                             000002F0  Local -- ARM
: part3                             0000033C  Local -- ARM
