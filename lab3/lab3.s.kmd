KMD
00000000:             ; ;by default it will branch to label 'part1'
00000000:             ; 
00000000: EA0000B2    ;         B part2; part1 or part2 or part3
00000004:             ; 
00000004:             ; 
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068:             ; 
00000068: 20 3E 3E 20 ; is              DEFB    " >> is \0"
0000006C: 69 73 20 00 ; 
00000070:             ;         ALIGN
00000070: 54 68 65 20 ; strsize         DEFB    "The length of string >> \0 "
00000074: 6C 65 6E 67 ; 
00000078: 74 68 20 6F ; 
0000007C: 66 20 73 74 ; 
00000080: 72 69 6E 67 ; 
00000084: 20 3E 3E 20 ; 
00000088: 00 20       ; 
0000008C:             ;         ALIGN
0000008C:             ; 
0000008C: 73 65 76 65 ; s1      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 73 69 78 00 ; s2      DEFB "six\0"
00000098:             ;         ALIGN
00000098: 66 69 76 65 ; s3      DEFB "five\0"
0000009C: 00          ; 
000000A0:             ;         ALIGN
000000A0: 66 6F 75 72 ; s4      DEFB "four\0"
000000A4: 00          ; 
000000A8:             ;         ALIGN
000000A8: 74 68 72 65 ; s5      DEFB "three\0"
000000AC: 65 00       ; 
000000B0:             ;         ALIGN
000000B0: 74 77 6F 00 ; s6      DEFB "two\0"
000000B4:             ;         ALIGN
000000B4: 6F 6E 65 00 ; s7      DEFB "one\0"
000000B8:             ;         ALIGN
000000B8: 43 4F 4D 50 ; s8      DEFB "COMP15111 \0"
000000BC: 31 35 31 31 ; 
000000C0: 31 20 00    ; 
000000C4:             ;         ALIGN
000000C4: 46 75 6E 64 ; s9      DEFB "Fundamentals of Computer Architecture\0"
000000C8: 61 6D 65 6E ; 
000000CC: 74 61 6C 73 ; 
000000D0: 20 6F 66 20 ; 
000000D4: 43 6F 6D 70 ; 
000000D8: 75 74 65 72 ; 
000000DC: 20 41 72 63 ; 
000000E0: 68 69 74 65 ; 
000000E4: 63 74 75 72 ; 
000000E8: 65 00       ; 
000000EC:             ;         ALIGN
000000EC:             ; 
000000EC:             ; printstring
000000EC: E1A00001    ;         MOV  R0,R1
000000F0: EF000003    ;         SVC  3
000000F4: E3A0000A    ;         MOV  R0, #10
000000F8: EF000000    ;         SVC  0
000000FC: E1A0F00E    ;         MOV  PC, LR
00000100:             ; 
00000100:             ; 
00000100:             ; 
00000100:             ; ;************************** part 1 **************************
00000100:             ; stringLength
00000100:             ; 
00000100:             ; ; R2 must contain the length of the string.
00000100:             ; ;by default R2 contains integer value zero, you need to write a
00000100:             ; ;piece of assembly code to calculate the length of the string pointed by R1
00000100:             ; ;your code goes here
00000100:             ;         
00000100: E3A02000    ;   MOV R2,#0           ;len = 0
00000104:             ;                         ;while string[len:]:
00000104:             ;                         ;   len =len+ 1
00000104:             ; 
00000104:             ;         ;;  contents of R1 = string
00000104:             ; 
00000104:             ;         
00000104:             ;         ;;  MOV R2, #4294967295
00000104:             ;         ;;  STR R3, all_ones            ;;  Doesn't work
00000104:             ; 
00000104:             ;         ;;  CMP and AND doesn't work, as cannot access CPSR register (Bennett restriction)
00000104:             ;         
00000104:             ;         ;;  Other ideas:
00000104:             ;         ;;    1. AND each bit individually
00000104:             ;         ;;    2. Bitshift right 8 times, AND the last position with 1
00000104:             ;         ;;              - This is a big reverse engineering effort, but learn some Assembly I g
                      ; uess
00000104:             ; 
00000104:             ;         ;;  But LSR also doesn't work
00000104:             ;         ;;      So...
00000104:             ; 
00000104:             ;         ;;  Lecture notes imply some branch instructions can indirectly access CPSR register.
00000104:             ;         
00000104:             ;         ;;  The truth is, I don't like videos/powerpoints... I have only been reading course te
                      ; xts.
00000104:             ; 
00000104:             ;         ;;  But you have to just follow the template course, because Bennett is a limited emula
                      ; tor.
00000104:             ;         ;;      Understand Christos' dismay with Bennett now.
00000104:             ; 
00000104:             ; 
00000104: E3A02000    ;         MOV R2, #0
00000108:             ; 
00000108:             ;         
00000108:             ; byte_loop_count
00000108:             ;         
00000108: E4D18001    ;         LDRB R8, [R1], #1       ; load byte from r1 to r8 and increment PC
0000010C: E3580000    ;         CMP R8, #0              ; compare r8 with 0, store result in CPSR
00000110: E2822001    ;         ADD R2, R2, #1          ; add 1 to r2
00000114:             ;         ;; MOV R0, R8
00000114:             ;         ;; SVC 0
00000114: 1AFFFFFB    ;         BNE byte_loop_count     ; using CPSR comparison bit, branch/not to byte_loop_count
00000118:             ; 
00000118:             ;         
00000118: E2422001    ;         ADD R2, R2, #-1         ; deincrement the extra counter (Ahmed gave this away in lectur
                      ; e)
0000011C:             ; 
0000011C:             ; 
0000011C:             ;         
0000011C:             ; ;R2 must contain the length of the string
0000011C:             ; ; don't remove these lines
0000011C: E1A00002    ;   MOV  R0,R2
00000120: EF000004    ;   SVC  4
00000124: E3A0000A    ;   MOV  R0, #10
00000128: EF000000    ;   SVC  0
0000012C: E1A0F00E    ;   MOV  PC, LR
00000130:             ; 
00000130:             ; 
00000130:             ; 
00000130:             ; ;************************** part 2 **************************
00000130:             ; printstringReverse
00000130:             ; 
00000130:             ; 
00000130:             ; ;;;   Note that this function expects that the string to print is in R1
00000130:             ; ;;;   And that R2 is unused
00000130:             ; 
00000130: E1A0C00E    ;         MOV R12, LR
00000134:             ; 
00000134: E28FE000    ;         ADR LR, reverse_process
00000138:             ; 
00000138: EAFFFFF0    ;         B stringLength          ; get the string length, return to this line
0000013C:             ; 
0000013C:             ; reverse_process
0000013C: E1A00008    ;         MOV R0, R8
00000140: EF000000    ;         SVC 0
00000144:             ; 
00000144: E1A0E00C    ;         MOV LR, R12
00000148:             ;         
00000148:             ;         ;; MOV R0, R2           ; 
00000148:             ;         ;; SVC 4
00000148:             ;         ;; MOV R0, R1
00000148:             ;         ;; SVC 3
00000148:             ; 
00000148:             ; 
00000148:             ; 
00000148:             ; 
00000148:             ; 
00000148:             ; ; don't remove these lines
00000148: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
0000014C: EF000000    ;         SVC  0          ; given
00000150: E1A0F00E    ;         MOV  PC, LR     ; given
00000154:             ; 
00000154:             ; ;************************** part 3 ***************************
00000154:             ; stringCopy
00000154:             ;                                         ;Your code goes here replacing the 2 lines given below
00000154: E1A0C002    ;   MOV  R12,R2
00000158: EF000003    ;   SVC  3
0000015C:             ; 
0000015C:             ; 
0000015C:             ; 
0000015C:             ; ; don't remove this line
0000015C: E1A0F00E    ;   MOV  PC, LR   ; given
00000160:             ; 
00000160:             ; 
00000160:             ; 
00000160:             ; ;*********************** the various parts ********************
00000160:             ; part1
00000160: E24F10F8    ;   ADR R1, strsize
00000164: E1A00001    ;   MOV  R0,R1
00000168: EF000003    ;   SVC  3
0000016C: E24F10E8    ;   ADR R1, s1
00000170: E1A00001    ;   MOV  R0,R1
00000174: EF000003    ;   SVC  3
00000178: E24F2F46    ;   ADR R2, is
0000017C: E1A00002    ;   MOV  R0,R2
00000180: EF000003    ;   SVC  3
00000184: E24F1C01    ;   ADR R1, s1
00000188: EBFFFFDC    ;   BL stringLength
0000018C:             ; 
0000018C:             ; 
0000018C: E24F1F49    ;   ADR R1, strsize
00000190: E1A00001    ;   MOV  R0,R1
00000194: EF000003    ;   SVC  3
00000198: E24F1F43    ;   ADR R1, s2
0000019C: E1A00001    ;   MOV  R0,R1
000001A0: EF000003    ;   SVC  3
000001A4: E24F2F51    ;   ADR R2, is
000001A8: E1A00002    ;   MOV  R0,R2
000001AC: EF000003    ;   SVC  3
000001B0: EBFFFFD2    ;   BL stringLength
000001B4:             ; 
000001B4: E24F1F53    ;   ADR R1, strsize
000001B8: E1A00001    ;   MOV  R0,R1
000001BC: EF000003    ;   SVC  3
000001C0: E24F1E13    ;   ADR R1, s3
000001C4: E1A00001    ;   MOV  R0,R1
000001C8: EF000003    ;   SVC  3
000001CC: E24F2F5B    ;   ADR R2, is
000001D0: E1A00002    ;   MOV  R0,R2
000001D4: EF000003    ;   SVC  3
000001D8: EBFFFFC8    ;   BL stringLength
000001DC:             ; 
000001DC: E24F1F5D    ;   ADR R1, strsize
000001E0: E1A00001    ;   MOV  R0,R1
000001E4: EF000003    ;   SVC  3
000001E8: E24F1E15    ;   ADR R1, s4
000001EC: E1A00001    ;   MOV  R0,R1
000001F0: EF000003    ;   SVC  3
000001F4: E24F2F65    ;   ADR R2, is
000001F8: E1A00002    ;   MOV  R0,R2
000001FC: EF000003    ;   SVC  3
00000200: EBFFFFBE    ;   BL stringLength
00000204:             ; 
00000204: E24F1F67    ;   ADR R1, strsize
00000208: E1A00001    ;   MOV  R0,R1
0000020C: EF000003    ;   SVC  3
00000210: E24F1E17    ;   ADR R1, s5
00000214: E1A00001    ;   MOV  R0,R1
00000218: EF000003    ;   SVC  3
0000021C: E24F2F6F    ;   ADR R2, is
00000220: E1A00002    ;   MOV  R0,R2
00000224: EF000003    ;   SVC  3
00000228: EBFFFFB4    ;   BL stringLength
0000022C:             ; 
0000022C: E24F1F71    ;   ADR R1, strsize
00000230: E1A00001    ;   MOV  R0,R1
00000234: EF000003    ;   SVC  3
00000238: E24F1E19    ;   ADR R1, s6
0000023C: E1A00001    ;   MOV  R0,R1
00000240: EF000003    ;   SVC  3
00000244: E24F2F79    ;   ADR R2, is
00000248: E1A00002    ;   MOV  R0,R2
0000024C: EF000003    ;   SVC  3
00000250: EBFFFFAA    ;   BL stringLength
00000254:             ; 
00000254: E24F1F7B    ;   ADR R1, strsize
00000258: E1A00001    ;   MOV  R0,R1
0000025C: EF000003    ;   SVC  3
00000260: E24F1F6D    ;   ADR R1, s7
00000264: E1A00001    ;   MOV  R0,R1
00000268: EF000003    ;   SVC  3
0000026C: E24F2F83    ;   ADR R2, is
00000270: E1A00002    ;   MOV  R0,R2
00000274: EF000003    ;   SVC  3
00000278: EBFFFFA0    ;   BL stringLength
0000027C:             ; 
0000027C: E24F1F85    ;   ADR R1, strsize
00000280: E1A00001    ;   MOV  R0,R1
00000284: EF000003    ;   SVC  3
00000288: E24F1F76    ;   ADR R1, s8
0000028C: E1A00001    ;   MOV  R0,R1
00000290: EF000003    ;   SVC  3
00000294: E24F2F8D    ;   ADR R2, is
00000298: E1A00002    ;   MOV  R0,R2
0000029C: EF000003    ;   SVC  3
000002A0: EBFFFF96    ;   BL stringLength
000002A4:             ; 
000002A4: E24F1F8F    ;   ADR R1, strsize
000002A8: E1A00001    ;   MOV  R0,R1
000002AC: EF000003    ;   SVC  3
000002B0: E24F1F7D    ;   ADR R1, s9
000002B4: E1A00001    ;   MOV  R0,R1
000002B8: EF000003    ;   SVC  3
000002BC: E24F2F97    ;   ADR R2, is
000002C0: E1A00002    ;   MOV  R0,R2
000002C4: EF000003    ;   SVC  3
000002C8: EBFFFF8C    ;   BL stringLength
000002CC: EF000002    ;   SVC 2
000002D0:             ; 
000002D0:             ; 
000002D0: E24F1F93    ; part2   ADR R1, s1
000002D4: EBFFFF95    ;   BL  printstringReverse
000002D8: E24F1F93    ;   ADR R1, s2
000002DC: EBFFFF93    ;   BL  printstringReverse
000002E0: E24F1E25    ;   ADR R1, s3
000002E4: EBFFFF91    ;   BL  printstringReverse
000002E8: E24F1E25    ;   ADR R1, s4
000002EC: EBFFFF8F    ;   BL  printstringReverse
000002F0: E24F1E25    ;   ADR R1, s5
000002F4: EBFFFF8D    ;   BL  printstringReverse
000002F8: E24F1E25    ;   ADR R1, s6
000002FC: EBFFFF8B    ;   BL  printstringReverse
00000300: E24F1F95    ;   ADR R1, s7
00000304: EBFFFF89    ;   BL  printstringReverse
00000308: E24F1F96    ;   ADR R1, s8
0000030C: EBFFFF87    ;   BL  printstringReverse
00000310: E24F1F95    ;   ADR R1, s9
00000314: EBFFFF85    ;   BL  printstringReverse
00000318: EF000002    ;   SVC 2
0000031C:             ; 
0000031C:             ; 
0000031C: E24F1F9B    ; part3   ADR R1, s8
00000320: E24F2F99    ;   ADR R2, s9
00000324: E24F3FCA    ;   ADR R3, buffer
00000328: EBFFFF89    ;   BL  stringCopy
0000032C: E24F1E33    ;   ADR R1, buffer
00000330: EBFFFF6D    ;   BL printstring
00000334:             ; 
00000334: EF000002    ;   SVC 2
00000338:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: is                                00000068  Local -- ARM
: strsize                           00000070  Local -- ARM
: s1                                0000008C  Local -- ARM
: s2                                00000094  Local -- ARM
: s3                                00000098  Local -- ARM
: s4                                000000A0  Local -- ARM
: s5                                000000A8  Local -- ARM
: s6                                000000B0  Local -- ARM
: s7                                000000B4  Local -- ARM
: s8                                000000B8  Local -- ARM
: s9                                000000C4  Local -- ARM
: printstring                       000000EC  Local -- ARM
: stringLength                      00000100  Local -- ARM
: byte_loop_count                   00000108  Local -- ARM
: printstringReverse                00000130  Local -- ARM
: reverse_process                   0000013C  Local -- ARM
: stringCopy                        00000154  Local -- ARM
: part1                             00000160  Local -- ARM
: part2                             000002D0  Local -- ARM
: part3                             0000031C  Local -- ARM
