KMD
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise until you've measured"
00000000:             ; ;;; ;;;         - David Patterson, Computer Organization (RISC-V), 6th edition
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise unless it reduces time spent debugging with Bennett" - me
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;   LOG OF WORKING CHANGES:
00000000:             ; ;;; ;;;   - hardcoded start of _stack address to 0x1000, to be able to find it with Bennett's G
                      ; UI
00000000:             ; ;;; ;;;       - can always be replaced with real stack without issues (e.g. at end of exercise)
00000000:             ; 
00000000:             ; 
00000000:             ; _stack          equ     0x1000
00000000:             ;         
00000000: E3A0DA01    ;         MOV     SP, #_stack             ; set SP to point to hardcoded location of _stack
00000004:             ;         
00000004:             ; ; COMP15111 lab 4 - Template file
00000004:             ; 
00000004:             ; print_char      equ     0               ; Define names to aid readability
00000004:             ; stop            equ     2
00000004:             ; print_str       equ     3
00000004:             ; print_no        equ     4
00000004:             ; 
00000004:             ; cLF             equ     10              ; Line-feed character
00000004:             ; 
00000004:             ;         
00000004:             ;         ;; ADR  SP, _stack      ; set SP pointing to the end of our stack
00000004:             ;         
00000004: EA000070    ;         B       main
00000008:             ; 
00000008:             ; 
00000008:             ; ;;; ;;;   Exactly what memory address does this actually go to??? 100 bytes/words from end?
00000008:             ; ;;; ;;;     Explicit address to set stack to is better for debugging.
00000008:             ;         
00000008:             ; ;;              DEFS    100             ; this chunk of memory is for the stack
00000008:             ; ;; _stack                                       ; This label is 'just after' the stack space
00000008:             ; 
00000008:             ; 
00000008: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
0000000C: 20 70 65 72 ; 
00000010: 73 6F 6E 20 ; 
00000014: 77 61 73 20 ; 
00000018: 62 6F 72 6E ; 
0000001C: 20 6F 6E 20 ; 
00000020: 00          ; 
00000021: 54 68 69 73 ; was             DEFB    "This person was ",0
00000025: 20 70 65 72 ; 
00000029: 73 6F 6E 20 ; 
0000002D: 77 61 73 20 ; 
00000031: 00          ; 
00000032: 20 6F 6E 20 ; on              DEFB    " on ",0
00000036: 00          ; 
00000037: 54 68 69 73 ; is              DEFB    "This person is ",0
0000003B: 20 70 65 72 ; 
0000003F: 73 6F 6E 20 ; 
00000043: 69 73 20 00 ; 
00000047: 20 74 6F 64 ; today           DEFB    " today!",0
0000004B: 61 79 21 00 ; 
0000004F: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
00000053: 20 70 65 72 ; 
00000057: 73 6F 6E 20 ; 
0000005B: 77 69 6C 6C ; 
0000005F: 20 62 65 20 ; 
00000063: 00          ; 
00000064:             ;                 ALIGN
00000064:             ; 
00000064: 00000017    ; pDay            DEFW    23              ;  pDay = 23    //or whatever is today's date
00000068: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
0000006C: 000007D5    ; pYear           DEFW    2005            ;  pYear = 2005
00000070:             ; 
00000070:             ; 
00000070:             ; 
00000070: 000007D0    ; sYear           DEFW    2000
00000074:             ; 
00000074:             ; 
00000074:             ; ; def printAgeHistory (bDay, bMonth, bYear)
00000074:             ; 
00000074:             ; ; parameters
00000074:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
00000074:             ; ;  R1 = bMonth
00000074:             ; ;  R2 = bYear
00000074:             ; ; local variables (callee-saved registers)
00000074:             ; ;  R4 = year
00000074:             ; ;  R5 = age
00000074:             ; ;  R6 = bDay - originally R0
00000074:             ; 
00000074:             ; printAgeHistory
00000074:             ; 
00000074:             ;         ;; PUSH {R6}                    ; callee saves three registers
00000074:             ;         ;; PUSH {R5}
00000074:             ;         ;; PUSH {R4}
00000074:             ; 
00000074:             ; ;;;   Don't know what the exercise means "there are some other registers which
00000074:             ; ;;;   this method is using" because I don't agree!
00000074:             ; ;;;   Anyway just saving them all instead.
00000074:             ;         
00000074: E92D000F    ;         STMFD SP!, {R0-R3}
00000078: E92D7F80    ;         STMFD SP!, {R7-R14}
0000007C:             ;         
0000007C: E92D0070    ;         STMFD SP!, {R4-R6}
00000080:             ; 
00000080:             ; ;for part 1
00000080:             ; ;replace the PUSH instructions given above with one STMFD instruction
00000080:             ; 
00000080:             ; 
00000080:             ; 
00000080: E59D6014    ;         LDR     R6, [SP, #(3 + 2) * 4]  ; load 3rd item on stack to r6
00000084: E59D1010    ;         LDR     R1, [SP, #(3 + 1) * 4]  ; load 2nd item on stock to r1
00000088: E59D200C    ;         LDR     R2, [SP, #(3 + 0) * 4]  ; load 1st item on stack to r2
0000008C:             ; 
0000008C:             ; ;;;   part 2, cut above lines in favour of loading at start
0000008C:             ;         
0000008C:             ;         
0000008C:             ; ;   year = bYear + 1
0000008C: E2824001    ;         ADD     R4, R2, #1      ; r4 = r2 + 1
00000090:             ; ;   age = 1;
00000090: E3A05001    ;         MOV     R5, #1          ; r5 = 1
00000094:             ;         
00000094:             ; ;;; ;;;  Unused reg
00000094:             ;         ;; MOV  R8, #1          ; r8 = 1
00000094:             ; 
00000094:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
00000094:             ;         
00000094: E24F0094    ;         ADRL    R0, wasborn     ; r0 = address of `wasborn`
00000098: EF000003    ;         SVC     print_str       ; out
0000009C: E1A00006    ;         MOV     R0, R6          ; r0 = r6 (bday)
000000A0: EF000004    ;         SVC     print_no        ; out
000000A4: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000000A8: EF000000    ;         SVC     print_char      ; out
000000AC: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
000000B0: EF000004    ;         SVC     print_no        ; out
000000B4: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000000B8: EF000000    ;         SVC     print_char      ; out
000000BC: E1A00002    ;         MOV     R0, R2          ; r0 = r2 (byear)
000000C0: EF000004    ;         SVC     print_no        ; out
000000C4: E3A0000A    ;         MOV     R0, #cLF        ; r0 = newline char
000000C8: EF000000    ;         SVC     print_char      ; out
000000CC:             ; 
000000CC:             ; ;;; ;;;  http://www-mdp.eng.cam.ac.uk/web/library/enginfo/mdp_micro/lecture3/lecture3-3-3.html
000000CC:             ;         
000000CC:             ; ; this code does: while year < pYear //{
000000CC: E51F0068    ; loop1   LDR     R0, pYear       ; r0 = pYear
000000D0: E1540000    ;         CMP     R4, R0          ; r4 == r0 ?
000000D4: 2A000014    ;         BHS     end1            ; branch to end1 if r4 > r0
000000D8:             ; 
000000D8:             ; ; for part 4, should be changed to:
000000D8:             ; ; while year < pYear or
000000D8:             ; ;                               (year == pYear and bMonth < pMonth) or
000000D8:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; 
000000D8:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
000000D8: E24F00BF    ;         ADRL    R0, was         ; r0 = `was` addr
000000DC: EF000003    ;         SVC     print_str       ; out
000000E0: E1A00005    ;         MOV     R0, R5          ; r0 = r5 (age)
000000E4: EF000004    ;         SVC     print_no        ; out
000000E8: E24F00BE    ;         ADRL    R0, on          ; r0 = `on` addr
000000EC: EF000003    ;         SVC     print_str       ; out
000000F0: E1A00006    ;         MOV     R0, R6          ; r0 = r6 (bday)
000000F4: EF000004    ;         SVC     print_no        ; out
000000F8: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii
000000FC: EF000000    ;         SVC     print_char      ; out
00000100: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
00000104: EF000004    ;         SVC     print_no        ; out
00000108: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii
0000010C: EF000000    ;         SVC     print_char      ; out
00000110: E1A00004    ;         MOV     R0, R4          ; r0 = r4 (year)
00000114: EF000004    ;         SVC     print_no        ; out
00000118: E3A0000A    ;         MOV     R0, #cLF        ; r0 = '\n' ascii
0000011C: EF000000    ;         SVC     print_char      ; out
00000120:             ; 
00000120:             ;         ; year = year + 1
00000120: E2844001    ;         ADD     R4, R4, #1      ; r4 += 1       (year += 1)
00000124:             ; 
00000124:             ; ;;; ;;;  Unused regs
00000124:             ;         ;; ADD  R8, R4, #1      ; r8 = r4 + 1   (year + 2)
00000124:             ;         ;; ADD  R9, R8, #1      ; r9 = r8 + 1   (year + 3)
00000124:             ;         
00000124:             ;         ; age = age + 1
00000124: E2855001    ;         ADD     R5, R5, #1      ; r5 += 1       (age + 1)
00000128:             ; 
00000128: EAFFFFE7    ;         B       loop1           ; branch to loop1
0000012C:             ; 
0000012C:             ; end1
0000012C:             ; ; this code does: if (bMonth == pMonth):
0000012C:             ; ; for part 4, should be changed to:
0000012C:             ; ; if (bMonth == pMonth and bDay == pDay):
0000012C:             ; 
0000012C: E51F00CC    ;         LDR     R0, pMonth      ; r0 = `pMonth` addr
00000130: E1510000    ;         CMP     R1, R0          ; r1 == r0?
00000134: 1A00000A    ;         BNE     else1
00000138:             ; 
00000138:             ; ; print("This person is " + str(age) + " today!")
00000138: E24F0009    ;         ADRL    R0, is          
0000013C: E2400C01    ; 
00000140: EF000003    ;         SVC     print_str
00000144: E1A00005    ;         MOV     R0, R5
00000148: EF000004    ;         SVC     print_no
0000014C: E24F000D    ;         ADRL    R0, today
00000150: E2400C01    ; 
00000154: EF000003    ;         SVC     print_str
00000158: E3A0000A    ;         MOV     R0, #cLF
0000015C: EF000000    ;         SVC     print_char
00000160:             ; 
00000160:             ; ; else
00000160: EA000013    ;         B       end2
00000164:             ; else1
00000164:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year    ))
00000164: E24F001D    ;         ADRL    R0, willbe
00000168: E2400C01    ; 
0000016C: EF000003    ;         SVC     print_str
00000170: E1A00005    ;         MOV     R0, R5
00000174: EF000004    ;         SVC     print_no
00000178: E24F004E    ;         ADRL    R0, on
0000017C: E2400C01    ; 
00000180: EF000003    ;         SVC     print_str
00000184: E1A00006    ;         MOV     R0, R6
00000188: EF000004    ;         SVC     print_no
0000018C: E3A0002F    ;         MOV     R0, #'/'
00000190: EF000000    ;         SVC     print_char
00000194: E1A00001    ;         MOV     R0, R1
00000198: EF000004    ;         SVC     print_no
0000019C: E3A0002F    ;         MOV     R0, #'/'
000001A0: EF000000    ;         SVC     print_char
000001A4: E1A00004    ;         MOV     R0, R4
000001A8: EF000004    ;         SVC     print_no
000001AC: E3A0000A    ;         MOV     R0, #cLF
000001B0: EF000000    ;         SVC     print_char
000001B4:             ; 
000001B4:             ; ; }// end of printAgeHistory
000001B4:             ; end2
000001B4:             ;                 ;; POP  {R4}            ; callee saved registers
000001B4:             ;                 ;; POP  {R5}
000001B4:             ;                 ;; POP  {R6}
000001B4:             ; 
000001B4: E8BD0070    ;         LDMFD SP!, {R4-R6}
000001B8:             ; 
000001B8:             ; ;for part 1
000001B8:             ; ;replace the POP instructions given above with one LDMFD instruction
000001B8:             ; 
000001B8: E1A0F00E    ;         MOV     PC, LR
000001BC:             ; 
000001BC:             ; another
000001BC: 41 6E 6F 74 ;         DEFB    "Another person",10,0
000001C0: 68 65 72 20 ; 
000001C4: 70 65 72 73 ; 
000001C8: 6F 6E 0A 00 ; 
000001CC:             ;         ALIGN
000001CC:             ; 
000001CC:             ; 
000001CC:             ; 
000001CC:             ; 
000001CC:             ; 
000001CC:             ; 
000001CC:             ; ; def main():
000001CC:             ; main
000001CC: E59F40B4    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
000001D0: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000001D4: E1A06004    ;         MOV     R6, R4
000001D8:             ; 
000001D8:             ; 
000001D8:             ; ; printAgeHistory(pDay, pMonth, 2000)
000001D8:             ;         ;; LDR  R0, pDay
000001D8:             ;         ;; PUSH {R0}                    ; Stack first parameter
000001D8:             ;         ;; LDR  R0, pMonth
000001D8:             ;         ;; PUSH {R0}                    ; Stack second parameter
000001D8:             ;         ;; LDR  R0, sYear
000001D8:             ;         ;; PUSH {R0}                    ; Stack third parameter
000001D8:             ; 
000001D8:             ; 
000001D8:             ; ;;; ;;;  Original above.
000001D8:             ;         
000001D8: E51F917C    ;         LDR     R9, pDay
000001DC:             ;         
000001DC:             ;         ;; STMFD SP!, {R9}
000001DC:             ;         ;; PUSH {R0}                    ; Stack first parameter
000001DC:             ;         
000001DC: E51F817C    ;         LDR     R8, pMonth
000001E0:             ;         
000001E0:             ;         ;; STMFD SP!, {R8}
000001E0:             ;         ;; PUSH {R1}                    ; Stack second parameter
000001E0:             ;         
000001E0: E51F7178    ;         LDR     R7, sYear
000001E4:             ;         
000001E4:             ;         ;; STMFD SP!, {R7}
000001E4:             ;         ;; PUSH {R2}                    ; Stack third parameter
000001E4:             ; 
000001E4: E92D0380    ;         STMFD SP!, {R7-R9}
000001E8:             ; 
000001E8:             ;                 
000001E8:             ;         
000001E8:             ; ;for part 1
000001E8:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
000001E8:             ; ; three parameters should be pushed to the stack with one STMFD instruction.
000001E8:             ; 
000001E8:             ; 
000001E8: EBFFFFA1    ;         BL      printAgeHistory
000001EC:             ; 
000001EC:             ; 
000001EC: E28DD03C    ;         ADD SP, SP, #4*15
000001F0:             ;         
000001F0:             ; 
000001F0:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
000001F0:             ;         ;; POP  {R0}
000001F0:             ;         ;; POP  {R0}
000001F0:             ; 
000001F0:             ; ;for part 1
000001F0:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
000001F0:             ; 
000001F0:             ; 
000001F0:             ; 
000001F0:             ; ; print("Another person");
000001F0: E24F003C    ;         ADRL    R0, another
000001F4: EF000003    ;         SVC     print_str
000001F8:             ; 
000001F8:             ; ; printAgeHistory(13, 11, 2000)
000001F8: E3A0900D    ;         MOV     R9, #13
000001FC:             ;         
000001FC:             ;         ;; PUSH {R0}                    ; Stack first parameter
000001FC:             ;         
000001FC: E3A0800B    ;         MOV     R8, #11
00000200:             ;         
00000200:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000200:             ;         
00000200: E3A07E7D    ;         MOV     R7, #2000
00000204:             ;         
00000204:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000204:             ; 
00000204: E92D0380    ;         STMFD   SP!, {R7-R9}
00000208:             ; 
00000208:             ; ;for part 1
00000208:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
00000208:             ; ; three parameters shuld be pushed to the stack with one STMFD instruction.
00000208:             ; 
00000208:             ;         
00000208: EBFFFF99    ;         BL      printAgeHistory
0000020C:             ; 
0000020C: E28DD03C    ;         ADD     SP, SP, #4*15
00000210:             ;         
00000210:             ; 
00000210:             ; 
00000210:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000210:             ;         ;; POP  {R0}
00000210:             ;         ;; POP  {R0}
00000210:             ; 
00000210:             ; ;for part 1
00000210:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000210:             ; 
00000210:             ; 
00000210:             ; 
00000210:             ;         ; Now check to see if register values intact (Not part of Java)
00000210: E59F0070    ;         LDR     R0, =&12345678          ; Test value
00000214: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
00000218: 01550000    ;         CMPEQ   R5, R0                  ;
0000021C: 01560000    ;         CMPEQ   R6, R0                  ;
00000220:             ; 
00000220: 128F0010    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000224: 1F000003    ;         SVCNE   print_str               ;
00000228:             ; 
00000228:             ; 
00000228:             ;         
00000228:             ;         ;; ADRL R0, _stack              ; Have you balanced pushes & pops?
00000228:             ;         ;; CMP  SP, R0                  ;
00000228:             ; 
00000228: E35D0A01    ;         CMP     SP, #_stack             ; Have you balanced pushes & pops?
0000022C:             ;                                         ; [hardcoded version]
0000022C:             ; 
0000022C:             ; 
0000022C:             ;         
0000022C: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000230: 1F000003    ;         SVCNE   print_str               ; End of test code
00000234:             ; 
00000234:             ; ; }// end of main
00000234: EF000002    ;         SVC     stop
00000238:             ; 
00000238:             ; 
00000238: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
0000023C: 42 55 54 20 ; 
00000240: 59 4F 55 20 ; 
00000244: 43 4F 52 52 ; 
00000248: 55 50 54 45 ; 
0000024C: 44 20 52 45 ; 
00000250: 47 49 53 54 ; 
00000254: 45 52 53 21 ; 
00000258: 20 20 2A 2A ; 
0000025C: 0A 00       ; 
0000025E: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
00000262: 42 55 54 20 ; 
00000266: 59 4F 55 52 ; 
0000026A: 20 53 54 41 ; 
0000026E: 43 4B 20 44 ; 
00000272: 49 44 4E 27 ; 
00000276: 54 20 42 41 ; 
0000027A: 4C 41 4E 43 ; 
0000027E: 45 21 20 20 ; 
00000282: 2A 2A 0A 00 ; 
00000286:             ; 
00000286: 00 00       ; (padding)
00000288: 12345678    ; Remaining literals

Symbol Table: Labels
: _stack                            00001000  Value
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: wasborn                           00000008  Local -- ARM
: was                               00000021  Local -- ARM
: on                                00000032  Local -- ARM
: is                                00000037  Local -- ARM
: today                             00000047  Local -- ARM
: willbe                            0000004F  Local -- ARM
: pDay                              00000064  Local -- ARM
: pMonth                            00000068  Local -- ARM
: pYear                             0000006C  Local -- ARM
: sYear                             00000070  Local -- ARM
: printAgeHistory                   00000074  Local -- ARM
: loop1                             000000CC  Local -- ARM
: end1                              0000012C  Local -- ARM
: else1                             00000164  Local -- ARM
: end2                              000001B4  Local -- ARM
: another                           000001BC  Local -- ARM
: main                              000001CC  Local -- ARM
: whoops1                           00000238  Local -- ARM
: whoops2                           0000025E  Local -- ARM
