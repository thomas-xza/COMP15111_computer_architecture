KMD
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise until you've measured"
00000000:             ; ;;; ;;;         - David Patterson, Computer Organization (RISC-V), 6th edition
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise unless it reduces time spent debugging with Bennett" - me
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;   LOG OF WORKING CHANGES:
00000000:             ; ;;; ;;;   - hardcoded start of _stack address to 0x1000, to be able to find it with Bennett's G
                      ; UI
00000000:             ; ;;; ;;;       - can always be replaced with real stack without issues (e.g. at end of exercise)
00000000:             ; 
00000000:             ; 
00000000:             ; ;; _stack               equ     0x1000
00000000:             ;         
00000000:             ; ;;      MOV     SP, #_stack             ; set SP to point to hardcoded location of _stack
00000000:             ;         
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ;         
00000000: E28FD064    ;         ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004:             ;         
00000004: EA00008D    ;         B       main
00000008:             ; 
00000008:             ; 
00000008:             ; ;;; ;;;   Exactly what memory address does this actually go to??? 100 bytes/words from end?
00000008:             ; ;;; ;;;     Explicit address to set stack to is better for debugging.
00000008:             ;         
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 49 66 20 74 ; is              DEFB    "If the year is 2005, this person is ",0
0000009F: 68 65 20 79 ; 
000000A3: 65 61 72 20 ; 
000000A7: 69 73 20 32 ; 
000000AB: 30 30 35 2C ; 
000000AF: 20 74 68 69 ; 
000000B3: 73 20 70 65 ; 
000000B7: 72 73 6F 6E ; 
000000BB: 20 69 73 20 ; 
000000BF: 00          ; 
000000C0: 20 74 6F 64 ; today           DEFB    " today!",0
000000C4: 61 79 21 00 ; 
000000C8: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000CC: 20 70 65 72 ; 
000000D0: 73 6F 6E 20 ; 
000000D4: 77 69 6C 6C ; 
000000D8: 20 62 65 20 ; 
000000DC: 00          ; 
000000E0:             ;                 ALIGN
000000E0:             ; 
000000E0: 00000017    ; pDay            DEFW    23              ;  pDay = 23    //or whatever is today's date
000000E4: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000E8: 000007D5    ; pYear           DEFW    2005            ;  pYear = 2005
000000EC:             ; 
000000EC:             ; 
000000EC:             ; 
000000EC: 000007D0    ; sYear           DEFW    2000
000000F0:             ; 
000000F0:             ; 
000000F0:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000F0:             ; 
000000F0:             ; ; parameters
000000F0:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000F0:             ; ;  R1 = bMonth
000000F0:             ; ;  R2 = bYear
000000F0:             ; ; local variables (callee-saved registers)
000000F0:             ; ;  R4 = year
000000F0:             ; ;  R5 = age
000000F0:             ; ;  R6 = bDay - originally R0
000000F0:             ; 
000000F0:             ; printAgeHistory
000000F0:             ; 
000000F0:             ;         ;; PUSH {R6}                    ; callee saves three registers
000000F0:             ;         ;; PUSH {R5}
000000F0:             ; m       ;; PUSH {R4}
000000F0:             ; 
000000F0:             ; ;;;   Don't know what the exercise means "there are some other registers which
000000F0:             ; ;;;   this method is using" because I don't agree!
000000F0:             ; ;;;   Anyway just saving them all instead.
000000F0:             ;         
000000F0: E92D000F    ;         STMFD SP!, {R0-R3}
000000F4: E92D1F80    ;         STMFD SP!, {R7-R12}
000000F8:             ;         
000000F8: E92D0070    ;         STMFD SP!, {R4-R6}
000000FC:             ; 
000000FC:             ; ;for part 1
000000FC:             ; ;replace the PUSH instructions given above with one STMFD instruction
000000FC:             ; 
000000FC:             ; 
000000FC:             ; 
000000FC: E59D6014    ;         LDR     R6, [SP, #(3 + 2) * 4]  ; load 3rd item on stack to r6
00000100: E59D1010    ;         LDR     R1, [SP, #(3 + 1) * 4]  ; load 2nd item on stock to r1
00000104: E59D200C    ;         LDR     R2, [SP, #(3 + 0) * 4]  ; load 1st item on stack to r2
00000108:             ; 
00000108:             ; ;;;   part 2, cut above lines in favour of loading at start
00000108:             ;         
00000108:             ;         
00000108:             ; ;   year = bYear + 1
00000108: E2824001    ;         ADD     R4, R2, #1      ; r4 = r2 + 1
0000010C:             ; ;   age = 1;
0000010C: E3A05001    ;         MOV     R5, #1          ; r5 = 1
00000110:             ;         
00000110:             ; ;;; ;;;  Unused reg
00000110:             ;         ;; MOV  R8, #1          ; r8 = 1
00000110:             ; 
00000110:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
00000110:             ;         
00000110: E24F00AC    ;         ADRL    R0, wasborn     ; r0 = address of `wasborn`
00000114: EF000003    ;         SVC     print_str       ; out
00000118: E1A00006    ;         MOV     R0, R6          ; r0 = r6 (bday)
0000011C: EF000004    ;         SVC     print_no        ; out
00000120: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
00000124: EF000000    ;         SVC     print_char      ; out
00000128: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
0000012C: EF000004    ;         SVC     print_no        ; out
00000130: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
00000134: EF000000    ;         SVC     print_char      ; out
00000138: E1A00002    ;         MOV     R0, R2          ; r0 = r2 (byear)
0000013C: EF000004    ;         SVC     print_no        ; out
00000140: E3A0000A    ;         MOV     R0, #cLF        ; r0 = newline char
00000144: EF000000    ;         SVC     print_char      ; out
00000148:             ; 
00000148:             ; ;;; ;;;  http://www-mdp.eng.cam.ac.uk/web/library/enginfo/mdp_micro/lecture3/lecture3-3-3.html
00000148:             ;         
00000148:             ; ; this code does: while year < pYear //{
00000148: E51F0068    ; loop1   LDR     R0, pYear       ; r0 = pYear
0000014C: E1540000    ;         CMP     R4, R0          ; r4 == r0 ?
00000150: 2A000014    ;         BHS     end1            ; branch to end1 if r4 > r0
00000154:             ; 
00000154:             ; ; for part 4, should be changed to:
00000154:             ; ; while year < pYear or
00000154:             ; ;                               (year == pYear and bMonth < pMonth) or
00000154:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; 
00000154:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000154: E24F00D7    ;         ADRL    R0, was         ; r0 = `was` addr
00000158: EF000003    ;         SVC     print_str       ; out
0000015C: E1A00005    ;         MOV     R0, R5          ; r0 = r5 (age)
00000160: EF000004    ;         SVC     print_no        ; out
00000164: E24F00D6    ;         ADRL    R0, on          ; r0 = `on` addr
00000168: EF000003    ;         SVC     print_str       ; out
0000016C: E1A00006    ;         MOV     R0, R6          ; r0 = r6 (bday)
00000170: EF000004    ;         SVC     print_no        ; out
00000174: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii
00000178: EF000000    ;         SVC     print_char      ; out
0000017C: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
00000180: EF000004    ;         SVC     print_no        ; out
00000184: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii
00000188: EF000000    ;         SVC     print_char      ; out
0000018C: E1A00004    ;         MOV     R0, R4          ; r0 = r4 (year)
00000190: EF000004    ;         SVC     print_no        ; out
00000194: E3A0000A    ;         MOV     R0, #cLF        ; r0 = '\n' ascii
00000198: EF000000    ;         SVC     print_char      ; out
0000019C:             ; 
0000019C:             ;         ; year = year + 1
0000019C: E2844001    ;         ADD     R4, R4, #1      ; r4 += 1       (year += 1)
000001A0:             ; 
000001A0:             ; ;;; ;;;  Unused regs
000001A0:             ;         ;; ADD  R8, R4, #1      ; r8 = r4 + 1   (year + 2)
000001A0:             ;         ;; ADD  R9, R8, #1      ; r9 = r8 + 1   (year + 3)
000001A0:             ;         
000001A0:             ;         ; age = age + 1
000001A0: E2855001    ;         ADD     R5, R5, #1      ; r5 += 1       (age + 1)
000001A4:             ; 
000001A4: EAFFFFE7    ;         B       loop1           ; branch to loop1
000001A8:             ; 
000001A8:             ; end1
000001A8:             ; ; this code does: if (bMonth == pMonth):
000001A8:             ; ; for part 4, should be changed to:
000001A8:             ; ; if (bMonth == pMonth and bDay == pDay):
000001A8:             ; 
000001A8: E51F00CC    ;         LDR     R0, pMonth      ; r0 = `pMonth` addr
000001AC: E1510000    ;         CMP     R1, R0          ; r1 == r0?
000001B0: 1A000009    ;         BNE     else1
000001B4:             ; 
000001B4:             ; ; print("This person is " + str(age) + " today!")
000001B4: E24F0021    ;         ADRL    R0, is          
000001B8: E2400C01    ; 
000001BC: EF000003    ;         SVC     print_str
000001C0: E1A00005    ;         MOV     R0, R5
000001C4: EF000004    ;         SVC     print_no
000001C8: E24F0E11    ;         ADRL    R0, today
000001CC: EF000003    ;         SVC     print_str
000001D0: E3A0000A    ;         MOV     R0, #cLF
000001D4: EF000000    ;         SVC     print_char
000001D8:             ; 
000001D8:             ; ; else
000001D8: EA000012    ;         B       end2
000001DC:             ; else1
000001DC:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year    ))
000001DC: E24F0F47    ;         ADRL    R0, willbe
000001E0: EF000003    ;         SVC     print_str
000001E4: E1A00005    ;         MOV     R0, R5
000001E8: EF000004    ;         SVC     print_no
000001EC: E24F005E    ;         ADRL    R0, on
000001F0: E2400C01    ; 
000001F4: EF000003    ;         SVC     print_str
000001F8: E1A00006    ;         MOV     R0, R6
000001FC: EF000004    ;         SVC     print_no
00000200: E3A0002F    ;         MOV     R0, #'/'
00000204: EF000000    ;         SVC     print_char
00000208: E1A00001    ;         MOV     R0, R1
0000020C: EF000004    ;         SVC     print_no
00000210: E3A0002F    ;         MOV     R0, #'/'
00000214: EF000000    ;         SVC     print_char
00000218: E1A00004    ;         MOV     R0, R4
0000021C: EF000004    ;         SVC     print_no
00000220: E3A0000A    ;         MOV     R0, #cLF
00000224: EF000000    ;         SVC     print_char
00000228:             ; 
00000228:             ; ; }// end of printAgeHistory
00000228:             ; end2
00000228:             ;                 ;; POP  {R4}            ; callee saved registers
00000228:             ;                 ;; POP  {R5}
00000228:             ;                 ;; POP  {R6}
00000228:             ; 
00000228: E8BD0070    ;         LDMFD SP!, {R4-R6}
0000022C:             ; 
0000022C:             ; ;for part 1
0000022C:             ; ;replace the POP instructions given above with one LDMFD instruction
0000022C:             ; 
0000022C: E1A0F00E    ;         MOV     PC, LR
00000230:             ; 
00000230:             ; another
00000230: 41 6E 6F 74 ;         DEFB    "Another person",10,0
00000234: 68 65 72 20 ; 
00000238: 70 65 72 73 ; 
0000023C: 6F 6E 0A 00 ; 
00000240:             ;         ALIGN
00000240:             ; 
00000240:             ; 
00000240:             ; 
00000240:             ; 
00000240:             ; 
00000240:             ; 
00000240:             ; ; def main():
00000240:             ; main
00000240: E59F40B8    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
00000244: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
00000248: E1A06004    ;         MOV     R6, R4
0000024C:             ; 
0000024C:             ; 
0000024C:             ; ; printAgeHistory(pDay, pMonth, 2000)
0000024C:             ;         ;; LDR  R0, pDay
0000024C:             ;         ;; PUSH {R0}                    ; Stack first parameter
0000024C:             ;         ;; LDR  R0, pMonth
0000024C:             ;         ;; PUSH {R0}                    ; Stack second parameter
0000024C:             ;         ;; LDR  R0, sYear
0000024C:             ;         ;; PUSH {R0}                    ; Stack third parameter
0000024C:             ; 
0000024C:             ; 
0000024C:             ; ;;; ;;;  Original above.
0000024C:             ;         
0000024C: E51F9174    ;         LDR     R9, pDay
00000250:             ;         
00000250:             ;         ;; STMFD SP!, {R9}
00000250:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000250:             ;         
00000250: E51F8174    ;         LDR     R8, pMonth
00000254:             ;         
00000254:             ;         ;; STMFD SP!, {R8}
00000254:             ;         ;; PUSH {R1}                    ; Stack second parameter
00000254:             ;         
00000254: E51F7170    ;         LDR     R7, sYear
00000258:             ;         
00000258:             ;         ;; STMFD SP!, {R7}
00000258:             ;         ;; PUSH {R2}                    ; Stack third parameter
00000258:             ; 
00000258: E92D0380    ;         STMFD SP!, {R7-R9}
0000025C:             ; 
0000025C:             ;                 
0000025C:             ;         
0000025C:             ; ;for part 1
0000025C:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
0000025C:             ; ; three parameters should be pushed to the stack with one STMFD instruction.
0000025C:             ; 
0000025C:             ; 
0000025C: EBFFFFA3    ;         BL      printAgeHistory
00000260:             ; 
00000260:             ; 
00000260: E28DD034    ;         ADD SP, SP, #4*13
00000264:             ;         
00000264:             ; 
00000264:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000264:             ;         ;; POP  {R0}
00000264:             ;         ;; POP  {R0}
00000264:             ; 
00000264:             ; ;for part 1
00000264:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000264:             ; 
00000264:             ; 
00000264:             ; 
00000264:             ; ; print("Another person");
00000264: E24F003C    ;         ADRL    R0, another
00000268: EF000003    ;         SVC     print_str
0000026C:             ; 
0000026C:             ; ; printAgeHistory(13, 11, 2000)
0000026C: E3A0900D    ;         MOV     R9, #13
00000270:             ;         
00000270:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000270:             ;         
00000270: E3A0800B    ;         MOV     R8, #11
00000274:             ;         
00000274:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000274:             ;         
00000274: E3A07E7D    ;         MOV     R7, #2000
00000278:             ;         
00000278:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000278:             ; 
00000278: E92D0380    ;         STMFD   SP!, {R7-R9}
0000027C:             ; 
0000027C:             ; ;for part 1
0000027C:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
0000027C:             ; ; three parameters shuld be pushed to the stack with one STMFD instruction.
0000027C:             ; 
0000027C:             ;         
0000027C: EBFFFF9B    ;         BL      printAgeHistory
00000280:             ; 
00000280: E28DD034    ;         ADD     SP, SP, #4*13
00000284:             ;         
00000284:             ; 
00000284:             ; 
00000284:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000284:             ;         ;; POP  {R0}
00000284:             ;         ;; POP  {R0}
00000284:             ; 
00000284:             ; ;for part 1
00000284:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000284:             ; 
00000284:             ; 
00000284:             ; 
00000284:             ;         ; Now check to see if register values intact (Not part of Java)
00000284: E59F0074    ;         LDR     R0, =&12345678          ; Test value
00000288: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
0000028C: 01550000    ;         CMPEQ   R5, R0                  ;
00000290: 01560000    ;         CMPEQ   R6, R0                  ;
00000294:             ; 
00000294: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000298: 1F000003    ;         SVCNE   print_str               ;
0000029C:             ; 
0000029C:             ; 
0000029C:             ;         
0000029C: E24F0F8E    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
000002A0: E15D0000    ;         CMP     SP, R0                  ;
000002A4:             ; 
000002A4:             ;         ;; CMP  SP, #_stack             ; Have you balanced pushes & pops?
000002A4:             ;                                         ; [hardcoded version]
000002A4:             ; 
000002A4:             ; 
000002A4:             ;         
000002A4: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
000002A8: 1F000003    ;         SVCNE   print_str               ; End of test code
000002AC:             ; 
000002AC:             ; ; }// end of main
000002AC: EF000002    ;         SVC     stop
000002B0:             ; 
000002B0:             ; 
000002B0: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
000002B4: 42 55 54 20 ; 
000002B8: 59 4F 55 20 ; 
000002BC: 43 4F 52 52 ; 
000002C0: 55 50 54 45 ; 
000002C4: 44 20 52 45 ; 
000002C8: 47 49 53 54 ; 
000002CC: 45 52 53 21 ; 
000002D0: 20 20 2A 2A ; 
000002D4: 0A 00       ; 
000002D6: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
000002DA: 42 55 54 20 ; 
000002DE: 59 4F 55 52 ; 
000002E2: 20 53 54 41 ; 
000002E6: 43 4B 20 44 ; 
000002EA: 49 44 4E 27 ; 
000002EE: 54 20 42 41 ; 
000002F2: 4C 41 4E 43 ; 
000002F6: 45 21 20 20 ; 
000002FA: 2A 2A 0A 00 ; 
000002FE:             ; 
000002FE: 00 00       ; (padding)
00000300: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000C0  Local -- ARM
: willbe                            000000C8  Local -- ARM
: pDay                              000000E0  Local -- ARM
: pMonth                            000000E4  Local -- ARM
: pYear                             000000E8  Local -- ARM
: sYear                             000000EC  Local -- ARM
: printAgeHistory                   000000F0  Local -- ARM
: m                                 000000F0  Local -- ARM
: loop1                             00000148  Local -- ARM
: end1                              000001A8  Local -- ARM
: else1                             000001DC  Local -- ARM
: end2                              00000228  Local -- ARM
: another                           00000230  Local -- ARM
: main                              00000240  Local -- ARM
: whoops1                           000002B0  Local -- ARM
: whoops2                           000002D6  Local -- ARM
