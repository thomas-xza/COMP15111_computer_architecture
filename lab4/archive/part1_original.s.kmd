KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA00008E    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay            DEFW    23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear           DEFW    2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; 
000000D4: 000007D0    ; sYear           DEFW    2000
000000D8:             ; 
000000D8:             ; 
000000D8:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D8:             ; 
000000D8:             ; ; parameters
000000D8:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D8:             ; ;  R1 = bMonth
000000D8:             ; ;  R2 = bYear
000000D8:             ; ; local variables (callee-saved registers)
000000D8:             ; ;  R4 = year
000000D8:             ; ;  R5 = age
000000D8:             ; ;  R6 = bDay - originally R0
000000D8:             ; 
000000D8:             ; printAgeHistory
000000D8:             ; 
000000D8: E92D0040    ;         PUSH    {R6}                    ; callee saves three registers
000000DC: E92D0020    ;         PUSH    {R5}
000000E0: E92D0010    ;         PUSH    {R4}
000000E4:             ; 
000000E4:             ; ;for part 1
000000E4:             ; ;replace the PUSH instructions given above with one STMFD instruction
000000E4:             ; 
000000E4:             ; 
000000E4:             ; 
000000E4: E59D6014    ;         LDR     R6, [SP, #(3 + 2) * 4]  ; Get parameters from stack
000000E8: E59D1010    ;         LDR     R1, [SP, #(3 + 1) * 4]
000000EC: E59D200C    ;         LDR     R2, [SP, #(3 + 0) * 4]
000000F0:             ; 
000000F0:             ; ;   year = bYear + 1
000000F0: E2824001    ;         ADD     R4, R2, #1
000000F4:             ; ;   age = 1;
000000F4: E3A05001    ;         MOV     R5, #1
000000F8: E3A08001    ;     MOV R8, #1
000000FC:             ; 
000000FC:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000FC: E24F0098    ;         ADRL    R0, wasborn
00000100: EF000003    ;         SVC     print_str
00000104: E1A00006    ;         MOV     R0, R6
00000108: EF000004    ;         SVC     print_no
0000010C: E3A0002F    ;         MOV     R0, #'/'
00000110: EF000000    ;         SVC     print_char
00000114: E1A00001    ;         MOV     R0, R1
00000118: EF000004    ;         SVC     print_no
0000011C: E3A0002F    ;         MOV     R0, #'/'
00000120: EF000000    ;         SVC     print_char
00000124: E1A00002    ;         MOV     R0, R2
00000128: EF000004    ;         SVC     print_no
0000012C: E3A0000A    ;         MOV     R0, #cLF
00000130: EF000000    ;         SVC     print_char
00000134:             ; 
00000134:             ; ; this code does: while year < pYear //{
00000134: E51F006C    ; loop1   LDR     R0, pYear
00000138: E1540000    ;         CMP     R4, R0
0000013C: 2A000016    ;         BHS     end1            ; Years are unsigned
00000140:             ; ; for part 4, should be changed to:
00000140:             ; ; while year < pYear or
00000140:             ; ;                               (year == pYear and bMonth < pMonth) or
00000140:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000140: E24F00C3    ;                 ADRL    R0, was
00000144: EF000003    ;                 SVC     print_str
00000148: E1A00005    ;                 MOV     R0, R5
0000014C: EF000004    ;                 SVC     print_no
00000150: E24F00C2    ;                 ADRL    R0, on
00000154: EF000003    ;                 SVC     print_str
00000158: E1A00006    ;                 MOV     R0, R6
0000015C: EF000004    ;                 SVC     print_no
00000160: E3A0002F    ;                 MOV     R0, #'/'
00000164: EF000000    ;                 SVC     print_char
00000168: E1A00001    ;                 MOV     R0, R1
0000016C: EF000004    ;                 SVC     print_no
00000170: E3A0002F    ;                 MOV     R0, #'/'
00000174: EF000000    ;                 SVC     print_char
00000178: E1A00004    ;                 MOV     R0, R4
0000017C: EF000004    ;                 SVC     print_no
00000180: E3A0000A    ;                 MOV     R0, #cLF
00000184: EF000000    ;                 SVC     print_char
00000188:             ; 
00000188:             ;                 ; year = year + 1
00000188: E2844001    ;                 ADD     R4, R4, #1
0000018C: E2848001    ;        ADD      R8, R4, #1
00000190: E2889001    ;        ADD      R9, R8, #1
00000194:             ;                 ; age = age + 1
00000194: E2855001    ;                 ADD     R5, R5, #1
00000198:             ;                 ; //}
00000198: EAFFFFE5    ;                 B       loop1
0000019C:             ; 
0000019C:             ; end1
0000019C:             ; ; this code does: if (bMonth == pMonth):
0000019C:             ; ; for part 4, should be changed to:
0000019C:             ; ; if (bMonth == pMonth and bDay == pDay):
0000019C:             ; 
0000019C: E51F00D8    ;                 LDR     R0, pMonth
000001A0: E1510000    ;                 CMP     R1, R0
000001A4: 1A00000A    ;                 BNE     else1
000001A8:             ; 
000001A8:             ; ; print("This person is " + str(age) + " today!")
000001A8: E24F0015    ;                 ADRL    R0, is
000001AC: E2400C01    ; 
000001B0: EF000003    ;                 SVC     print_str
000001B4: E1A00005    ;                 MOV     R0, R5
000001B8: EF000004    ;                 SVC     print_no
000001BC: E24F0019    ;                 ADRL    R0, today
000001C0: E2400C01    ; 
000001C4: EF000003    ;                 SVC     print_str
000001C8: E3A0000A    ;                 MOV     R0, #cLF
000001CC: EF000000    ;                 SVC     print_char
000001D0:             ; 
000001D0:             ; ; else
000001D0: EA000013    ;                 B       end2
000001D4:             ; else1
000001D4:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
000001D4: E24F0029    ;                 ADRL    R0, willbe
000001D8: E2400C01    ; 
000001DC: EF000003    ;                 SVC     print_str
000001E0: E1A00005    ;                 MOV     R0, R5
000001E4: EF000004    ;                 SVC     print_no
000001E8: E24F005A    ;                 ADRL    R0, on
000001EC: E2400C01    ; 
000001F0: EF000003    ;                 SVC     print_str
000001F4: E1A00006    ;                 MOV     R0, R6
000001F8: EF000004    ;                 SVC     print_no
000001FC: E3A0002F    ;                 MOV     R0, #'/'
00000200: EF000000    ;                 SVC     print_char
00000204: E1A00001    ;                 MOV     R0, R1
00000208: EF000004    ;                 SVC     print_no
0000020C: E3A0002F    ;                 MOV     R0, #'/'
00000210: EF000000    ;                 SVC     print_char
00000214: E1A00004    ;                 MOV     R0, R4
00000218: EF000004    ;                 SVC     print_no
0000021C: E3A0000A    ;                 MOV     R0, #cLF
00000220: EF000000    ;                 SVC     print_char
00000224:             ; 
00000224:             ; ; }// end of printAgeHistory
00000224:             ; end2
00000224: E8BD0010    ;         POP     {R4}            ; callee saved registers
00000228: E8BD0020    ;                 POP     {R5}
0000022C: E8BD0040    ;                 POP     {R6}
00000230:             ; 
00000230:             ; ;for part 1
00000230:             ; ;replace the POP instructions given above with one LDMFD instruction
00000230:             ; 
00000230: E1A0F00E    ;                 MOV     PC, LR
00000234:             ; 
00000234: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
00000238: 68 65 72 20 ; 
0000023C: 70 65 72 73 ; 
00000240: 6F 6E 0A 00 ; 
00000244:             ;                 ALIGN
00000244:             ; 
00000244:             ; 
00000244:             ; 
00000244:             ; 
00000244:             ; 
00000244:             ; 
00000244:             ; ; def main():
00000244:             ; main
00000244: E59F40D8    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
00000248: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
0000024C: E1A06004    ;         MOV     R6, R4
00000250:             ; 
00000250:             ; 
00000250:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000250: E51F0190    ;                 LDR     R0, pDay
00000254: E92D0001    ;                 PUSH    {R0}                    ; Stack first parameter
00000258: E51F0194    ;                 LDR     R0, pMonth
0000025C: E92D0002    ;                 PUSH    {R1}                    ; Stack second parameter
00000260: E51F0194    ;                 LDR     R0, sYear
00000264: E92D0001    ;                 PUSH    {R0}                    ; Stack third parameter
00000268:             ; ;for part 1
00000268:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
00000268:             ; ; three parameters should be pushed to the stack with one STMFD instruction.
00000268:             ; 
00000268:             ; 
00000268: EBFFFF9A    ;                 BL      printAgeHistory
0000026C:             ; 
0000026C:             ; 
0000026C:             ; 
0000026C: E8BD0001    ;                 POP     {R0}                    ; Deallocate three 32-bit variables
00000270: E8BD0001    ;                 POP     {R0}
00000274: E8BD0001    ;                 POP     {R0}
00000278:             ; 
00000278:             ; ;for part 1
00000278:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000278:             ; 
00000278:             ; 
00000278:             ; 
00000278:             ; ; print("Another person");
00000278: E24F004C    ;                 ADRL    R0, another
0000027C: EF000003    ;                 SVC     print_str
00000280:             ; 
00000280:             ; ; printAgeHistory(13, 11, 2000)
00000280: E3A0000D    ;                 MOV     R0, #13
00000284: E92D0001    ;                 PUSH    {R0}                    ; Stack first parameter
00000288: E3A0000B    ;                 MOV     R0, #11
0000028C: E52D0004    ;                 STR     R0, [SP, #-4]!          ; An explicit coding of PUSH
00000290: E3A00E7D    ;                 MOV     R0, #2000
00000294: E52D0004    ;         STR     R0, [SP, #-4]!          ; An explicit coding of PUSH
00000298:             ; 
00000298:             ; 
00000298:             ; ;for part 1
00000298:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
00000298:             ; ; three parameters shuld be pushed to the stack with one STMFD instruction.
00000298:             ; 
00000298:             ; 
00000298: EBFFFF8E    ;                 BL      printAgeHistory
0000029C:             ; 
0000029C:             ; 
0000029C:             ; 
0000029C: E8BD0001    ;         POP     {R0}                    ; Deallocate three 32-bit variables
000002A0: E8BD0001    ;                 POP     {R0}
000002A4: E8BD0001    ;                 POP     {R0}
000002A8:             ; 
000002A8:             ; ;for part 1
000002A8:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
000002A8:             ; 
000002A8:             ; 
000002A8:             ; 
000002A8:             ;         ; Now check to see if register values intact (Not part of Java)
000002A8: E59F0074    ;         LDR     R0, =&12345678          ; Test value
000002AC: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
000002B0: 01550000    ;         CMPEQ   R5, R0                  ;
000002B4: 01560000    ;         CMPEQ   R6, R0                  ;
000002B8:             ; 
000002B8: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
000002BC: 1F000003    ;         SVCNE   print_str               ;
000002C0:             ; 
000002C0: E24F0F97    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
000002C4: E15D0000    ;         CMP     SP, R0                  ;
000002C8:             ; 
000002C8: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
000002CC: 1F000003    ;         SVCNE   print_str               ; End of test code
000002D0:             ; 
000002D0:             ; ; }// end of main
000002D0: EF000002    ;                 SVC     stop
000002D4:             ; 
000002D4:             ; 
000002D4: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
000002D8: 42 55 54 20 ; 
000002DC: 59 4F 55 20 ; 
000002E0: 43 4F 52 52 ; 
000002E4: 55 50 54 45 ; 
000002E8: 44 20 52 45 ; 
000002EC: 47 49 53 54 ; 
000002F0: 45 52 53 21 ; 
000002F4: 20 20 2A 2A ; 
000002F8: 0A 00       ; 
000002FA: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
000002FE: 42 55 54 20 ; 
00000302: 59 4F 55 52 ; 
00000306: 20 53 54 41 ; 
0000030A: 43 4B 20 44 ; 
0000030E: 49 44 4E 27 ; 
00000312: 54 20 42 41 ; 
00000316: 4C 41 4E 43 ; 
0000031A: 45 21 20 20 ; 
0000031E: 2A 2A 0A 00 ; 
00000322:             ; 
00000322: 00 00       ; (padding)
00000324: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: sYear                             000000D4  Local -- ARM
: printAgeHistory                   000000D8  Local -- ARM
: loop1                             00000134  Local -- ARM
: end1                              0000019C  Local -- ARM
: else1                             000001D4  Local -- ARM
: end2                              00000224  Local -- ARM
: another                           00000234  Local -- ARM
: main                              00000244  Local -- ARM
: whoops1                           000002D4  Local -- ARM
: whoops2                           000002FA  Local -- ARM
