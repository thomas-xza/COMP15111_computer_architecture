KMD
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise until you've measured"
00000000:             ; ;;; ;;;         - David Patterson, Computer Organization (RISC-V), 6th edition
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise unless it reduces time spent debugging with Bennett" - me
00000000:             ;         
00000000:             ; 
00000000:             ; ;;; ;;;   LOG OF WORKING CHANGES:
00000000:             ; ;;; ;;;   - hardcoded start of _stack address to 0x1000, to find it with Bennett's GUI
00000000:             ; ;;; ;;;   - can always be replaced with dynamic stack without issues (e.g. at end of exercise)
00000000:             ; 
00000000:             ; 
00000000:             ; _stack          equ     0x1000
00000000:             ;         
00000000: E3A0DA01    ;         MOV     SP, #_stack             ; set SP to point to hardcoded location of _stack
00000004:             ;         
00000004:             ; ; COMP15111 lab 4 - Template file
00000004:             ; 
00000004:             ; print_char      equ     0               ; Define names to aid readability
00000004:             ; stop            equ     2
00000004:             ; print_str       equ     3
00000004:             ; print_no        equ     4
00000004:             ; 
00000004:             ; cLF             equ     10              ; Line-feed character
00000004:             ; 
00000004:             ;         
00000004:             ;         ;; ADR  SP, _stack      ; set SP pointing to the end of our stack
00000004:             ;         
00000004: EA000088    ;         B       main
00000008:             ; 
00000008:             ; 
00000008:             ; ;;; ;;;   Exactly what memory address does this actually go to??? 100 bytes/words from end?
00000008:             ; ;;; ;;;     Explicit address to set stack to is better for debugging.
00000008:             ; 
00000008:             ; ;;; ;;;   Boosted size of stack to write Assembly faster.
00000008:             ; 
00000008:             ; ;;; ;;;   - Wonder what the real-life cost of this would be?
00000008:             ; ;;; ;;;         Negligible?
00000008:             ; ;;; ;;;         1,000,000 x $0.03?
00000008:             ; ;;; ;;;         1,000,000 x $0.0003?
00000008:             ;         
00000008:             ;         
00000008:             ; ;;              DEFS    2048            ; this chunk of memory is for the stack
00000008:             ; ;; _stack                                       ; This label is 'just after' the stack space
00000008:             ; 
00000008:             ; 
00000008: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
0000000C: 20 70 65 72 ; 
00000010: 73 6F 6E 20 ; 
00000014: 77 61 73 20 ; 
00000018: 62 6F 72 6E ; 
0000001C: 20 6F 6E 20 ; 
00000020: 00          ; 
00000021: 54 68 69 73 ; was             DEFB    "This person was ",0
00000025: 20 70 65 72 ; 
00000029: 73 6F 6E 20 ; 
0000002D: 77 61 73 20 ; 
00000031: 00          ; 
00000032: 20 6F 6E 20 ; on              DEFB    " on ",0
00000036: 00          ; 
00000037: 49 66 20 74 ; is              DEFB    "If the year is 2005, this person is ",0
0000003B: 68 65 20 79 ; 
0000003F: 65 61 72 20 ; 
00000043: 69 73 20 32 ; 
00000047: 30 30 35 2C ; 
0000004B: 20 74 68 69 ; 
0000004F: 73 20 70 65 ; 
00000053: 72 73 6F 6E ; 
00000057: 20 69 73 20 ; 
0000005B: 00          ; 
0000005C: 20 74 6F 64 ; today           DEFB    " today!",0
00000060: 61 79 21 00 ; 
00000064: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
00000068: 20 70 65 72 ; 
0000006C: 73 6F 6E 20 ; 
00000070: 77 69 6C 6C ; 
00000074: 20 62 65 20 ; 
00000078: 00          ; 
0000007C:             ;                 ALIGN
0000007C:             ; 
0000007C:             ; ;;; ;;;  x_current dates
0000007C:             ;         
0000007C: 00000018    ; pDay            DEFW    24              ;  pDay = 24    
00000080: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  
00000084: 000007D5    ; pYear           DEFW    2005            ;  pYear = 2005 
00000088:             ; 
00000088:             ; 
00000088:             ; 
00000088: 000007D0    ; sYear           DEFW    2000
0000008C:             ; 
0000008C:             ; 
0000008C:             ; 
0000008C:             ; printTheDate
0000008C:             ;         
0000008C:             ; ;;; parameters
0000008C:             ; ;;;   [SP, 0] = day
0000008C:             ; ;;;   [SP, 4] = month
0000008C:             ; ;;;   [SP, 8] = year
0000008C:             ;         
0000008C:             ; ;;; local variables
0000008C:             ; ;;;   r0 = day
0000008C:             ; ;;;   r1 = month
0000008C:             ; ;;;   r2 = year
0000008C:             ;         
0000008C:             ;         
0000008C: E92D1FFF    ;         STMFD   SP!, {R0-R12}   ;  store all general-purpose registers to stack
00000090:             ; 
00000090:             ; ;;;   Load the 3 items pushed by previous method.
00000090:             ;         
00000090: E59D003C    ;         LDR     R0, [SP, #(13 + 2) * 4]         ;  load 16th item on stack to r0
00000094: E59D1038    ;         LDR     R1, [SP, #(13 + 1) * 4]         ;  load 15th item on stack to r1
00000098: E59D2034    ;         LDR     R2, [SP, #(13 + 0) * 4]         ;  load 14th item on stack to r2
0000009C:             ; 
0000009C:             ; ;;;   Output date as string.
0000009C:             ;         
0000009C: EF000004    ;         SVC     print_no        ; out
000000A0: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000000A4: EF000000    ;         SVC     print_char      ; out
000000A8: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
000000AC: EF000004    ;         SVC     print_no        ; out
000000B0: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000000B4: EF000000    ;         SVC     print_char      ; out
000000B8: E1A00002    ;         MOV     R0, R2          ; r0 = r2 (byear)
000000BC: EF000004    ;         SVC     print_no        ; out
000000C0:             ; 
000000C0: E8BD1FFF    ;         LDMFD   SP!, {R0-R12}   ; reload past contents of registers
000000C4:             ; 
000000C4: E1A0F00E    ;         MOV     PC, LR          ; link back to previous method
000000C8:             ;         
000000C8:             ; 
000000C8:             ;         
000000C8:             ; 
000000C8:             ; 
000000C8:             ;         
000000C8:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000C8:             ;         
000000C8:             ;         
000000C8:             ; printAgeHistory
000000C8:             ; 
000000C8:             ; ;;; parameters
000000C8:             ; ;;;   R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000C8:             ; ;;;   R1 = bMonth
000000C8:             ; ;;;   R2 = bYear
000000C8:             ;         
000000C8:             ; ;;; local variables (callee-saved registers)
000000C8:             ; ;;;   R4 = year_iter
000000C8:             ; ;;;   R5 = age
000000C8:             ; ;;;   R6 = bDay - originally R0 
000000C8:             ; ;;;   R7 = comparison store
000000C8:             ; ;;;   R8 = comparison store #2
000000C8:             ; ;;;   R9 = comparison store #3
000000C8:             ; ;;;   R10 = comparison store #4
000000C8:             ; 
000000C8:             ;         ;; PUSH {R6}                    ; callee saves three registers
000000C8:             ;         ;; PUSH {R5}
000000C8:             ;         ;; PUSH {R4}
000000C8:             ; 
000000C8:             ; ;;;   Don't know what the exercise means "there are some other registers which
000000C8:             ; ;;;   this method is using" because I don't agree!
000000C8:             ; ;;;   Anyway just saving them all instead, but keeping the needed ones at top.
000000C8:             ;         
000000C8: E92D000F    ;         STMFD SP!, {R0-R3}
000000CC: E92D1F80    ;         STMFD SP!, {R7-R12}
000000D0:             ;         
000000D0: E92D0070    ;         STMFD SP!, {R4-R6}
000000D4:             ; 
000000D4:             ; ;for part 1
000000D4:             ; ;replace the PUSH instructions given above with one STMFD instruction   
000000D4:             ;    
000000D4: E59D6014    ;         LDR     R6, [SP, #(3 + 2) * 4]  ; load 3rd item on stack to r6
000000D8: E59D1010    ;         LDR     R1, [SP, #(3 + 1) * 4]  ; load 2nd item on stock to r1
000000DC: E59D200C    ;         LDR     R2, [SP, #(3 + 0) * 4]  ; load 1st item on stack to r2
000000E0:             ; 
000000E0:             ;         
000000E0:             ;         
000000E0:             ; ;   year = bYear + 1
000000E0: E2824001    ;         ADD     R4, R2, #1      ; r4 = r2 + 1
000000E4:             ; ;   age = 1;
000000E4: E3A05001    ;         MOV     R5, #1          ; r5 = 1
000000E8:             ;         
000000E8:             ; ;;; ;;;  Unused reg
000000E8:             ;         ;; MOV  R8, #1          ; r8 = 1
000000E8:             ; 
000000E8:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000E8:             ;         
000000E8: E24F00E8    ;         ADRL    R0, wasborn     ; r0 = address of `wasborn`
000000EC: EF000003    ;         SVC     print_str       ; out
000000F0:             ; 
000000F0: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
000000F4:             ; 
000000F4: E92D0040    ;         PUSH {R6}               ; r6 = day
000000F8: E92D0002    ;         PUSH {R1}               ; r1 = month
000000FC: E92D0004    ;         PUSH {R2}               ; r2 = year     
00000100:             ; 
00000100: EBFFFFE1    ;         BL printTheDate
00000104:             ; 
00000104: E8BD0004    ;         POP {R2}                ; r2 = year
00000108: E8BD0002    ;         POP {R1}                ; r1 = month
0000010C: E8BD0040    ;         POP {R6}                ; r6 = day
00000110:             ;         
00000110: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
00000114:             ; 
00000114:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
00000114:             ;         ;; SVC  print_no        ; out
00000114:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii n
00000114:             ;         ;; SVC  print_char      ; out
00000114:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
00000114:             ;         ;; SVC  print_no        ; out
00000114:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii n
00000114:             ;         ;; SVC  print_char      ; out
00000114:             ;         ;; MOV  R0, R2          ; r0 = r2 (byear)
00000114:             ;         ;; SVC  print_no        ; out
00000114:             ;         
00000114: E3A0000A    ;         MOV     R0, #cLF        ; r0 = newline char
00000118: EF000000    ;         SVC     print_char      ; out
0000011C:             ; 
0000011C:             ;         
0000011C:             ; ;;; ;;;  http://www-mdp.eng.cam.ac.uk/web/library/enginfo/mdp_micro/lecture3/lecture3-3-3.html
0000011C:             ;         
0000011C:             ; ; this code does: while year < pYear //{
0000011C:             ; 
0000011C:             ; loop1
0000011C:             ;         ;; LDR     R0, pYear
0000011C:             ;         ;; CMP     R4, R0
0000011C:             ;         ;; BHS     end1  ; Years are unsigned
0000011C:             ; 
0000011C:             ; ; for part 4, should be changed to:
0000011C:             ; ; while year < pYear or
0000011C:             ; ; (year == pYear and bMonth < pMonth) or
0000011C:             ; ; (year == pYear and bMonth == pMonth and bDay < pDay):
0000011C:             ; 
0000011C:             ; 
0000011C:             ; 
0000011C:             ; ;;; ;;;  I feel that lower-case is more legible, I have some regrets.
0000011C:             ; 
0000011C:             ; ;;; ;;;  Admittedly I didn't read the Python up until now, was disorienting.
0000011C:             ; ;;; ;;;  Ahmed suggested there can be ways to shorten conditionals, in the lecture.
0000011C:             ; ;;; ;;;  Thought about that in AgeHistoryPart4.c (a lot), AgeHistoryPart4.py for experiments.
0000011C:             ;         
0000011C:             ; ;;; ;;;  But, there is none! I went barking up the wrong tree, but it
0000011C:             ; ;;; ;;;  is not the 1st time I desired a metric measurement of
0000011C:             ; ;;; ;;;  time...
0000011C:             ; 
0000011C:             ;         
0000011C:             ; ;;; ;;;  Data overview:
0000011C:             ; ;;; ;;;      r4                         iter_year
0000011C:             ; ;;; ;;;      pYear, pMonth, pDay        fixed date
0000011C:             ;         
0000011C:             ;         
0000011C:             ; ;;;  branch to end if:    year_iter > year_current 
0000011C:             ;         
0000011C: E51F00A0    ;         LDR     r0, pYear       ; r0 = pYear (fixed year for comparison)
00000120:             ;         
00000120: E1540000    ;         CMP     r4, r0          ; compare r4 (iterating year) with r0 (fixed year)
00000124: 2A00001B    ;         BHS     end1            ; branch to end1 if r4 > r0
00000128:             ; 
00000128: E1540000    ;         CMP     r4, r0          ; compare again (not sure if necessary)
0000012C: 03A07001    ;         MOVEQ   r7, #1          ; if iter_year == fixed year ; then r7 = 1
00000130:             ; 
00000130:             ; 
00000130:             ; 
00000130:             ; ;;;  branch to end if:    year_iter == year_current && bday_month < month_current
00000130:             ; 
00000130: E51F00B8    ;         LDR     r0, pMonth      ; r0 = pMonth
00000134: E1510000    ;         CMP     r1, r0          ; compare r1 (iter month) with r0 (month from mem)
00000138:             ;         
00000138:             ;         ;; BHI  end1            ; branch if equal
00000138:             ; 
00000138:             ; 
00000138:             ; ;;;  branch to end if:   day_bday  day_current
00000138:             ;         
00000138: E51F00C4    ;         LDR     r0, pDay        ; r0 = pMonth
0000013C: E1560000    ;         CMP     r6, r0          ; compare r6 (iter month) with r0 (month from mem)
00000140:             ;         
00000140:             ;         ;; BHI  end             ; 
00000140:             ; 
00000140:             ;         
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; 
00000140:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000140: E24F0027    ;         ADRL    R0, was         ; r0 = `was` addr
00000144: E2400C01    ; 
00000148: EF000003    ;         SVC     print_str       ; out
0000014C: E1A00005    ;         MOV     R0, R5          ; r0 = r5 (age)
00000150: EF000004    ;         SVC     print_no        ; out
00000154: E24F002A    ;         ADRL    R0, on          ; r0 = `on` addr
00000158: E2400C01    ; 
0000015C: EF000003    ;         SVC     print_str       ; out
00000160:             ;         
00000160: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
00000164:             ; 
00000164: E92D0040    ;         PUSH {R6}               ; r6 = day
00000168: E92D0002    ;         PUSH {R1}               ; r1 = month
0000016C: E92D0010    ;         PUSH {R4}               ; r4 = year     
00000170:             ; 
00000170: EBFFFFC5    ;         BL printTheDate
00000174:             ; 
00000174: E8BD0010    ;         POP {R4}                ; r4 = year
00000178: E8BD0002    ;         POP {R1}                ; r1 = month
0000017C: E8BD0040    ;         POP {R6}                ; r6 = day
00000180:             ;         
00000180: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
00000184:             ;         
00000184:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
00000184:             ;         ;; SVC  print_no        ; out
00000184:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
00000184:             ;         ;; SVC  print_char      ; out
00000184:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
00000184:             ;         ;; SVC  print_no        ; out
00000184:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
00000184:             ;         ;; SVC  print_char      ; out
00000184:             ;         ;; MOV  R0, R4          ; r0 = r4 (year)
00000184:             ;         ;; SVC  print_no        ; out
00000184:             ;         
00000184: E3A0000A    ;         MOV     R0, #cLF        ; r0 = '\n' ascii
00000188: EF000000    ;         SVC     print_char      ; out
0000018C:             ; 
0000018C:             ;         ; year = year + 1
0000018C: E2844001    ;         ADD     R4, R4, #1      ; r4 += 1       (year += 1)
00000190:             ; 
00000190:             ; ;;; ;;;  Unused regs
00000190:             ;         ;; ADD  R8, R4, #1      ; r8 = r4 + 1   (year + 2)
00000190:             ;         ;; ADD  R9, R8, #1      ; r9 = r8 + 1   (year + 3)
00000190:             ;         
00000190:             ;         ; age = age + 1
00000190: E2855001    ;         ADD     R5, R5, #1      ; r5 += 1       (age + 1)
00000194:             ; 
00000194: EAFFFFE0    ;         B       loop1           ; branch to loop1
00000198:             ; 
00000198:             ; end1
00000198:             ; ; this code does: if (bMonth == pMonth):
00000198:             ; ; for part 4, should be changed to:
00000198:             ; ; if (bMonth == pMonth and bDay == pDay):
00000198:             ; 
00000198: E51F0120    ;         LDR     R0, pMonth      ; r0 = `pMonth` addr
0000019C: E1510000    ;         CMP     R1, R0          ; r1 == r0?
000001A0: 1A000009    ;         BNE     else1
000001A4:             ; 
000001A4:             ; ; print("This person is " + str(age) + " today!")
000001A4: E24F0075    ;         ADRL    R0, is          
000001A8: E2400C01    ; 
000001AC: EF000003    ;         SVC     print_str
000001B0: E1A00005    ;         MOV     R0, R5
000001B4: EF000004    ;         SVC     print_no
000001B8: E24F0F59    ;         ADRL    R0, today
000001BC: EF000003    ;         SVC     print_str
000001C0: E3A0000A    ;         MOV     R0, #cLF
000001C4: EF000000    ;         SVC     print_char
000001C8:             ; 
000001C8:             ; ; else
000001C8: EA000011    ;         B       end2
000001CC:             ; else1
000001CC:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year    ))
000001CC: E24F0E17    ;         ADRL    R0, willbe
000001D0: EF000003    ;         SVC     print_str
000001D4: E1A00005    ;         MOV     R0, R5
000001D8: EF000004    ;         SVC     print_no
000001DC: E24F00B2    ;         ADRL    R0, on
000001E0: E2400C01    ; 
000001E4: EF000003    ;         SVC     print_str
000001E8:             ;         
000001E8: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
000001EC:             ; 
000001EC: E92D0040    ;         PUSH {R6}               ; r6 = day
000001F0: E92D0002    ;         PUSH {R1}               ; r1 = month
000001F4: E92D0010    ;         PUSH {R4}               ; r4 = year     
000001F8:             ; 
000001F8: EBFFFFA3    ;         BL printTheDate
000001FC:             ; 
000001FC: E8BD0010    ;         POP {R4}                ; r4 = year
00000200: E8BD0002    ;         POP {R1}                ; r1 = month
00000204: E8BD0040    ;         POP {R6}                ; r6 = day
00000208:             ;         
00000208: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
0000020C:             ;         
0000020C:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
0000020C:             ;         ;; SVC  print_no        ; out
0000020C:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
0000020C:             ;         ;; SVC  print_char      ; out
0000020C:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
0000020C:             ;         ;; SVC  print_no        ; out
0000020C:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
0000020C:             ;         ;; SVC  print_char      ; out
0000020C:             ;         ;; MOV  R0, R4          ; r0 = r4 (year)
0000020C:             ;         ;; SVC  print_no        ; out
0000020C:             ;                 
0000020C: E3A0000A    ;         MOV     R0, #cLF
00000210: EF000000    ;         SVC     print_char
00000214:             ; 
00000214:             ; ; }// end of printAgeHistory
00000214:             ; end2
00000214:             ;                 ;; POP  {R4}            ; callee saved registers
00000214:             ;                 ;; POP  {R5}
00000214:             ;                 ;; POP  {R6}
00000214:             ; 
00000214: E8BD0070    ;         LDMFD   SP!, {R4-R6}
00000218:             ; 
00000218:             ; ;for part 1
00000218:             ; ;replace the POP instructions given above with one LDMFD instruction
00000218:             ; 
00000218: E1A0F00E    ;         MOV     PC, LR
0000021C:             ; 
0000021C:             ; another
0000021C: 41 6E 6F 74 ;         DEFB    "Another person",10,0
00000220: 68 65 72 20 ; 
00000224: 70 65 72 73 ; 
00000228: 6F 6E 0A 00 ; 
0000022C:             ;         ALIGN
0000022C:             ; 
0000022C:             ; 
0000022C:             ; 
0000022C:             ; 
0000022C:             ; 
0000022C:             ; 
0000022C:             ; ; def main():
0000022C:             ; main
0000022C: E59F40B4    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
00000230: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
00000234: E1A06004    ;         MOV     R6, R4
00000238:             ; 
00000238:             ; 
00000238:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000238:             ;         ;; LDR  R0, pDay
00000238:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000238:             ;         ;; LDR  R0, pMonth
00000238:             ;         ;; PUSH {R0}                    ; Stack second parameter
00000238:             ;         ;; LDR  R0, sYear
00000238:             ;         ;; PUSH {R0}                    ; Stack third parameter
00000238:             ; 
00000238:             ; 
00000238:             ; ;;; ;;;  Original above.
00000238:             ;         
00000238: E51F91C4    ;         LDR     R9, pDay
0000023C:             ;         
0000023C:             ;         ;; STMFD SP!, {R9}
0000023C:             ;         ;; PUSH {R0}                    ; Stack first parameter
0000023C:             ;         
0000023C: E51F81C4    ;         LDR     R8, pMonth
00000240:             ;         
00000240:             ;         ;; STMFD SP!, {R8}
00000240:             ;         ;; PUSH {R1}                    ; Stack second parameter
00000240:             ;         
00000240: E51F71C0    ;         LDR     R7, sYear
00000244:             ;         
00000244:             ;         ;; STMFD SP!, {R7}
00000244:             ;         ;; PUSH {R2}                    ; Stack third parameter
00000244:             ; 
00000244: E92D0380    ;         STMFD SP!, {R7-R9}
00000248:             ; 
00000248:             ;                 
00000248:             ;         
00000248:             ; ;for part 1
00000248:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
00000248:             ; ; three parameters should be pushed to the stack with one STMFD instruction.
00000248:             ; 
00000248:             ; 
00000248: EBFFFF9E    ;         BL      printAgeHistory
0000024C:             ; 
0000024C:             ; 
0000024C: E28DD034    ;         ADD SP, SP, #4*13
00000250:             ;         
00000250:             ; 
00000250:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000250:             ;         ;; POP  {R0}
00000250:             ;         ;; POP  {R0}
00000250:             ; 
00000250:             ; ;for part 1
00000250:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000250:             ; 
00000250:             ; 
00000250:             ; 
00000250:             ; ; print("Another person");
00000250: E24F003C    ;         ADRL    R0, another
00000254: EF000003    ;         SVC     print_str
00000258:             ; 
00000258:             ; ; printAgeHistory(13, 11, 2000)
00000258: E3A0900D    ;         MOV     R9, #13
0000025C:             ;         
0000025C:             ;         ;; PUSH {R0}                    ; Stack first parameter
0000025C:             ;         
0000025C: E3A0800B    ;         MOV     R8, #11
00000260:             ;         
00000260:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000260:             ;         
00000260: E3A07E7D    ;         MOV     R7, #2000
00000264:             ;         
00000264:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000264:             ; 
00000264: E92D0380    ;         STMFD   SP!, {R7-R9}
00000268:             ; 
00000268:             ; ;for part 1
00000268:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
00000268:             ; ; three parameters shuld be pushed to the stack with one STMFD instruction.
00000268:             ; 
00000268:             ;         
00000268: EBFFFF96    ;         BL      printAgeHistory
0000026C:             ; 
0000026C: E28DD034    ;         ADD     SP, SP, #4*13
00000270:             ;         
00000270:             ; 
00000270:             ; 
00000270:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000270:             ;         ;; POP  {R0}
00000270:             ;         ;; POP  {R0}
00000270:             ; 
00000270:             ; ;for part 1
00000270:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000270:             ; 
00000270:             ; 
00000270:             ; 
00000270:             ;         ; Now check to see if register values intact (Not part of Java)
00000270: E59F0070    ;         LDR     R0, =&12345678          ; Test value
00000274: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
00000278: 01550000    ;         CMPEQ   R5, R0                  ;
0000027C: 01560000    ;         CMPEQ   R6, R0                  ;
00000280:             ; 
00000280: 128F0010    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000284: 1F000003    ;         SVCNE   print_str               ;
00000288:             ; 
00000288:             ; 
00000288:             ;         
00000288:             ;         ;; ADRL R0, _stack              ; Have you balanced pushes & pops?
00000288:             ;         ;; CMP  SP, R0                  ;
00000288:             ; 
00000288: E35D0A01    ;         CMP     SP, #_stack             ; Have you balanced pushes & pops?
0000028C:             ;                                         ; [hardcoded version]
0000028C:             ; 
0000028C:             ; 
0000028C:             ;         
0000028C: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000290: 1F000003    ;         SVCNE   print_str               ; End of test code
00000294:             ; 
00000294:             ; ; }// end of main
00000294: EF000002    ;         SVC     stop
00000298:             ; 
00000298:             ; 
00000298: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
0000029C: 42 55 54 20 ; 
000002A0: 59 4F 55 20 ; 
000002A4: 43 4F 52 52 ; 
000002A8: 55 50 54 45 ; 
000002AC: 44 20 52 45 ; 
000002B0: 47 49 53 54 ; 
000002B4: 45 52 53 21 ; 
000002B8: 20 20 2A 2A ; 
000002BC: 0A 00       ; 
000002BE: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
000002C2: 42 55 54 20 ; 
000002C6: 59 4F 55 52 ; 
000002CA: 20 53 54 41 ; 
000002CE: 43 4B 20 44 ; 
000002D2: 49 44 4E 27 ; 
000002D6: 54 20 42 41 ; 
000002DA: 4C 41 4E 43 ; 
000002DE: 45 21 20 20 ; 
000002E2: 2A 2A 0A 00 ; 
000002E6:             ; 
000002E6: 00 00       ; (padding)
000002E8: 12345678    ; Remaining literals

Symbol Table: Labels
: _stack                            00001000  Value
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: wasborn                           00000008  Local -- ARM
: was                               00000021  Local -- ARM
: on                                00000032  Local -- ARM
: is                                00000037  Local -- ARM
: today                             0000005C  Local -- ARM
: willbe                            00000064  Local -- ARM
: pDay                              0000007C  Local -- ARM
: pMonth                            00000080  Local -- ARM
: pYear                             00000084  Local -- ARM
: sYear                             00000088  Local -- ARM
: printTheDate                      0000008C  Local -- ARM
: printAgeHistory                   000000C8  Local -- ARM
: loop1                             0000011C  Local -- ARM
: end1                              00000198  Local -- ARM
: else1                             000001CC  Local -- ARM
: end2                              00000214  Local -- ARM
: another                           0000021C  Local -- ARM
: main                              0000022C  Local -- ARM
: whoops1                           00000298  Local -- ARM
: whoops2                           000002BE  Local -- ARM
