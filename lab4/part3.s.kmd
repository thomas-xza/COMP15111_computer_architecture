KMD
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise until you've measured"
00000000:             ; ;;; ;;;         - David Patterson, Computer Organization (RISC-V), 6th edition
00000000:             ; 
00000000:             ; 
00000000:             ; ;;; ;;;  "Don't optimise unless it reduces time spent debugging with Bennett" - me
00000000:             ;         
00000000:             ; 
00000000:             ; ;;; ;;;   LOG OF WORKING CHANGES:
00000000:             ; ;;; ;;;   - hardcoded start of _stack address to 0x1000, to find it with Bennett's GUI
00000000:             ; ;;; ;;;   - can always be replaced with dynamic stack without issues (e.g. at end of exercise)
00000000:             ; 
00000000:             ; 
00000000:             ; ;; _stack               equ     0x1000
00000000:             ;         
00000000:             ; ;;      MOV     SP, #_stack             ; set SP to point to hardcoded location of _stack
00000000:             ;         
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ;         
00000000: E28FDB02    ;         ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004:             ;         
00000004: EA000282    ;         B       main
00000008:             ; 
00000008:             ; 
00000008:             ; ;;; ;;;   Exactly what memory address does this actually go to??? 100 bytes/words from end?
00000008:             ; ;;; ;;;     Explicit address to set stack to is better for debugging.
00000008:             ; 
00000008:             ; ;;; ;;;   Boosted size of stack to write Assembly faster.
00000008:             ;         
00000008:             ;                 DEFS    2048            ; this chunk of memory is for the stack
00000808:             ; _stack                                  ; This label is 'just after' the stack space
00000808:             ; 
00000808:             ; 
00000808: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
0000080C: 20 70 65 72 ; 
00000810: 73 6F 6E 20 ; 
00000814: 77 61 73 20 ; 
00000818: 62 6F 72 6E ; 
0000081C: 20 6F 6E 20 ; 
00000820: 00          ; 
00000821: 54 68 69 73 ; was             DEFB    "This person was ",0
00000825: 20 70 65 72 ; 
00000829: 73 6F 6E 20 ; 
0000082D: 77 61 73 20 ; 
00000831: 00          ; 
00000832: 20 6F 6E 20 ; on              DEFB    " on ",0
00000836: 00          ; 
00000837: 49 66 20 74 ; is              DEFB    "If the year is 2005, this person is ",0
0000083B: 68 65 20 79 ; 
0000083F: 65 61 72 20 ; 
00000843: 69 73 20 32 ; 
00000847: 30 30 35 2C ; 
0000084B: 20 74 68 69 ; 
0000084F: 73 20 70 65 ; 
00000853: 72 73 6F 6E ; 
00000857: 20 69 73 20 ; 
0000085B: 00          ; 
0000085C: 20 74 6F 64 ; today           DEFB    " today!",0
00000860: 61 79 21 00 ; 
00000864: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
00000868: 20 70 65 72 ; 
0000086C: 73 6F 6E 20 ; 
00000870: 77 69 6C 6C ; 
00000874: 20 62 65 20 ; 
00000878: 00          ; 
0000087C:             ;                 ALIGN
0000087C:             ; 
0000087C: 00000017    ; pDay            DEFW    23              ;  pDay = 23    
00000880: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  
00000884: 000007D5    ; pYear           DEFW    2005            ;  pYear = 2005 
00000888:             ; 
00000888:             ; 
00000888:             ; 
00000888: 000007D0    ; sYear           DEFW    2000
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; printTheDate
0000088C:             ;         
0000088C:             ; ;;; parameters
0000088C:             ; ;;;     [SP, 0] = day
0000088C:             ; ;;;     [SP, 4] = month
0000088C:             ; ;;;     [SP, 8] = year
0000088C:             ;         
0000088C:             ; ;;; local variables
0000088C:             ; ;;;     r0 = day
0000088C:             ; ;;;     r1 = month
0000088C:             ; ;;;     r2 = year
0000088C:             ;         
0000088C: E92D1FFF    ;         STMFD   SP!, {R0-R12}   ;  store all general-purpose registers to stack
00000890:             ; 
00000890:             ; ;;;   Load the 3 items pushed by previous method.
00000890:             ;         
00000890: E59D003C    ;         LDR     R0, [SP, #(13 + 2) * 4]         ;  load 14th item on stack to r0
00000894: E59D1038    ;         LDR     R1, [SP, #(13 + 1) * 4]         ;  load 15th item on stack to r1
00000898: E59D2034    ;         LDR     R2, [SP, #(13 + 0) * 4]         ;  load 16th item on stack to r2
0000089C:             ; 
0000089C:             ; ;;;   Output date as string.
0000089C:             ;         
0000089C: EF000004    ;         SVC     print_no        ; out
000008A0: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000008A4: EF000000    ;         SVC     print_char      ; out
000008A8: E1A00001    ;         MOV     R0, R1          ; r0 = r1 (bmonth)
000008AC: EF000004    ;         SVC     print_no        ; out
000008B0: E3A0002F    ;         MOV     R0, #'/'        ; r0 = '/' ascii n
000008B4: EF000000    ;         SVC     print_char      ; out
000008B8: E1A00002    ;         MOV     R0, R2          ; r0 = r2 (byear)
000008BC: EF000004    ;         SVC     print_no        ; out
000008C0:             ; 
000008C0: E8BD1FFF    ;         LDMFD   SP!, {R0-R12}   ; reload past contents of registers
000008C4:             ; 
000008C4: E1A0F00E    ;         MOV     PC, LR          ; link back to previous method
000008C8:             ;         
000008C8:             ; 
000008C8:             ;         
000008C8:             ; 
000008C8:             ; 
000008C8:             ;         
000008C8:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000008C8:             ; 
000008C8:             ; ; parameters
000008C8:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000008C8:             ; ;  R1 = bMonth
000008C8:             ; ;  R2 = bYear
000008C8:             ; ; local variables (callee-saved registers)
000008C8:             ; ;  R4 = year
000008C8:             ; ;  R5 = age
000008C8:             ; ;  R6 = bDay - originally R0    
000008C8:             ;         
000008C8:             ;         
000008C8:             ; printAgeHistory
000008C8:             ; 
000008C8:             ;         ;; PUSH {R6}                    ; callee saves three registers
000008C8:             ;         ;; PUSH {R5}
000008C8:             ;         ;; PUSH {R4}
000008C8:             ; 
000008C8:             ; ;;;   Don't know what the exercise means "there are some other registers which
000008C8:             ; ;;;   this method is using" because I don't agree!
000008C8:             ; ;;;   Anyway just saving them all instead, but keeping the needed ones at top.
000008C8:             ;         
000008C8: E92D000F    ;         STMFD SP!, {R0-R3}
000008CC: E92D1F80    ;         STMFD SP!, {R7-R12}
000008D0:             ;         
000008D0: E92D0070    ;         STMFD SP!, {R4-R6}
000008D4:             ; 
000008D4:             ; ;for part 1
000008D4:             ; ;replace the PUSH instructions given above with one STMFD instruction
000008D4:             ; 
000008D4:             ;         
000008D4:             ;    
000008D4: E59D6014    ;         LDR     R6, [SP, #(3 + 2) * 4]  ; load 3rd item on stack to r6
000008D8: E59D1010    ;         LDR     R1, [SP, #(3 + 1) * 4]  ; load 2nd item on stock to r1
000008DC: E59D200C    ;         LDR     R2, [SP, #(3 + 0) * 4]  ; load 1st item on stack to r2
000008E0:             ; 
000008E0:             ;         
000008E0:             ;         
000008E0:             ; ;   year = bYear + 1
000008E0: E2824001    ;         ADD     R4, R2, #1      ; r4 = r2 + 1
000008E4:             ; ;   age = 1;
000008E4: E3A05001    ;         MOV     R5, #1          ; r5 = 1
000008E8:             ;         
000008E8:             ; ;;; ;;;  Unused reg
000008E8:             ;         ;; MOV  R8, #1          ; r8 = 1
000008E8:             ; 
000008E8:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000008E8:             ;         
000008E8: E24F00E8    ;         ADRL    R0, wasborn     ; r0 = address of `wasborn`
000008EC: EF000003    ;         SVC     print_str       ; out
000008F0:             ; 
000008F0: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
000008F4:             ; 
000008F4: E92D0040    ;         PUSH {R6}               ; r6 = day
000008F8: E92D0002    ;         PUSH {R1}               ; r1 = month
000008FC: E92D0004    ;         PUSH {R2}               ; r2 = year     
00000900:             ; 
00000900: EBFFFFE1    ;         BL printTheDate
00000904:             ; 
00000904: E8BD0004    ;         POP {R2}                ; r2 = year
00000908: E8BD0002    ;         POP {R1}                ; r1 = month
0000090C: E8BD0040    ;         POP {R6}                ; r6 = day
00000910:             ;         
00000910: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
00000914:             ; 
00000914:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
00000914:             ;         ;; SVC  print_no        ; out
00000914:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii n
00000914:             ;         ;; SVC  print_char      ; out
00000914:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
00000914:             ;         ;; SVC  print_no        ; out
00000914:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii n
00000914:             ;         ;; SVC  print_char      ; out
00000914:             ;         ;; MOV  R0, R2          ; r0 = r2 (byear)
00000914:             ;         ;; SVC  print_no        ; out
00000914:             ;         
00000914: E3A0000A    ;         MOV     R0, #cLF        ; r0 = newline char
00000918: EF000000    ;         SVC     print_char      ; out
0000091C:             ; 
0000091C:             ; ;;; ;;;  http://www-mdp.eng.cam.ac.uk/web/library/enginfo/mdp_micro/lecture3/lecture3-3-3.html
0000091C:             ;         
0000091C:             ; ; this code does: while year < pYear //{
0000091C: E51F00A0    ; loop1   LDR     R0, pYear       ; r0 = pYear
00000920: E1540000    ;         CMP     R4, R0          ; r4 == r0 ?
00000924: 2A000015    ;         BHS     end1            ; branch to end1 if r4 > r0
00000928:             ; 
00000928:             ; ; for part 4, should be changed to:
00000928:             ; ; while year < pYear or
00000928:             ; ;                               (year == pYear and bMonth < pMonth) or
00000928:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; 
00000928:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000928: E24F000F    ;         ADRL    R0, was         ; r0 = `was` addr
0000092C: E2400C01    ; 
00000930: EF000003    ;         SVC     print_str       ; out
00000934: E1A00005    ;         MOV     R0, R5          ; r0 = r5 (age)
00000938: EF000004    ;         SVC     print_no        ; out
0000093C: E24F0012    ;         ADRL    R0, on          ; r0 = `on` addr
00000940: E2400C01    ; 
00000944: EF000003    ;         SVC     print_str       ; out
00000948:             ;         
00000948: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
0000094C:             ; 
0000094C: E92D0040    ;         PUSH {R6}               ; r6 = day
00000950: E92D0002    ;         PUSH {R1}               ; r1 = month
00000954: E92D0010    ;         PUSH {R4}               ; r4 = year     
00000958:             ; 
00000958: EBFFFFCB    ;         BL printTheDate
0000095C:             ; 
0000095C: E8BD0010    ;         POP {R4}                ; r4 = year
00000960: E8BD0002    ;         POP {R1}                ; r1 = month
00000964: E8BD0040    ;         POP {R6}                ; r6 = day
00000968:             ;         
00000968: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
0000096C:             ;         
0000096C:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
0000096C:             ;         ;; SVC  print_no        ; out
0000096C:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
0000096C:             ;         ;; SVC  print_char      ; out
0000096C:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
0000096C:             ;         ;; SVC  print_no        ; out
0000096C:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
0000096C:             ;         ;; SVC  print_char      ; out
0000096C:             ;         ;; MOV  R0, R4          ; r0 = r4 (year)
0000096C:             ;         ;; SVC  print_no        ; out
0000096C:             ;         
0000096C: E3A0000A    ;         MOV     R0, #cLF        ; r0 = '\n' ascii
00000970: EF000000    ;         SVC     print_char      ; out
00000974:             ; 
00000974:             ;         ; year = year + 1
00000974: E2844001    ;         ADD     R4, R4, #1      ; r4 += 1       (year += 1)
00000978:             ; 
00000978:             ; ;;; ;;;  Unused regs
00000978:             ;         ;; ADD  R8, R4, #1      ; r8 = r4 + 1   (year + 2)
00000978:             ;         ;; ADD  R9, R8, #1      ; r9 = r8 + 1   (year + 3)
00000978:             ;         
00000978:             ;         ; age = age + 1
00000978: E2855001    ;         ADD     R5, R5, #1      ; r5 += 1       (age + 1)
0000097C:             ; 
0000097C: EAFFFFE6    ;         B       loop1           ; branch to loop1
00000980:             ; 
00000980:             ; end1
00000980:             ; ; this code does: if (bMonth == pMonth):
00000980:             ; ; for part 4, should be changed to:
00000980:             ; ; if (bMonth == pMonth and bDay == pDay):
00000980:             ; 
00000980: E51F0108    ;         LDR     R0, pMonth      ; r0 = `pMonth` addr
00000984: E1510000    ;         CMP     R1, R0          ; r1 == r0?
00000988: 1A000009    ;         BNE     else1
0000098C:             ; 
0000098C:             ; ; print("This person is " + str(age) + " today!")
0000098C: E24F005D    ;         ADRL    R0, is          
00000990: E2400C01    ; 
00000994: EF000003    ;         SVC     print_str
00000998: E1A00005    ;         MOV     R0, R5
0000099C: EF000004    ;         SVC     print_no
000009A0: E24F0F53    ;         ADRL    R0, today
000009A4: EF000003    ;         SVC     print_str
000009A8: E3A0000A    ;         MOV     R0, #cLF
000009AC: EF000000    ;         SVC     print_char
000009B0:             ; 
000009B0:             ; ; else
000009B0: EA000011    ;         B       end2
000009B4:             ; else1
000009B4:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year    ))
000009B4: E24F0F56    ;         ADRL    R0, willbe
000009B8: EF000003    ;         SVC     print_str
000009BC: E1A00005    ;         MOV     R0, R5
000009C0: EF000004    ;         SVC     print_no
000009C4: E24F009A    ;         ADRL    R0, on
000009C8: E2400C01    ; 
000009CC: EF000003    ;         SVC     print_str
000009D0:             ;         
000009D0: E92D4000    ;         PUSH {LR}               ; store LR to stack - overwritten at BL
000009D4:             ; 
000009D4: E92D0040    ;         PUSH {R6}               ; r6 = day
000009D8: E92D0002    ;         PUSH {R1}               ; r1 = month
000009DC: E92D0010    ;         PUSH {R4}               ; r4 = year     
000009E0:             ; 
000009E0: EBFFFFA9    ;         BL printTheDate
000009E4:             ; 
000009E4: E8BD0010    ;         POP {R4}                ; r4 = year
000009E8: E8BD0002    ;         POP {R1}                ; r1 = month
000009EC: E8BD0040    ;         POP {R6}                ; r6 = day
000009F0:             ;         
000009F0: E8BD4000    ;         POP {LR}                ; retrieve LR from stack
000009F4:             ;         
000009F4:             ;         ;; MOV  R0, R6          ; r0 = r6 (bday)
000009F4:             ;         ;; SVC  print_no        ; out
000009F4:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
000009F4:             ;         ;; SVC  print_char      ; out
000009F4:             ;         ;; MOV  R0, R1          ; r0 = r1 (bmonth)
000009F4:             ;         ;; SVC  print_no        ; out
000009F4:             ;         ;; MOV  R0, #'/'        ; r0 = '/' ascii
000009F4:             ;         ;; SVC  print_char      ; out
000009F4:             ;         ;; MOV  R0, R4          ; r0 = r4 (year)
000009F4:             ;         ;; SVC  print_no        ; out
000009F4:             ;                 
000009F4: E3A0000A    ;         MOV     R0, #cLF
000009F8: EF000000    ;         SVC     print_char
000009FC:             ; 
000009FC:             ; ; }// end of printAgeHistory
000009FC:             ; end2
000009FC:             ;                 ;; POP  {R4}            ; callee saved registers
000009FC:             ;                 ;; POP  {R5}
000009FC:             ;                 ;; POP  {R6}
000009FC:             ; 
000009FC: E8BD0070    ;         LDMFD   SP!, {R4-R6}
00000A00:             ; 
00000A00:             ; ;for part 1
00000A00:             ; ;replace the POP instructions given above with one LDMFD instruction
00000A00:             ; 
00000A00: E1A0F00E    ;         MOV     PC, LR
00000A04:             ; 
00000A04:             ; another
00000A04: 41 6E 6F 74 ;         DEFB    "Another person",10,0
00000A08: 68 65 72 20 ; 
00000A0C: 70 65 72 73 ; 
00000A10: 6F 6E 0A 00 ; 
00000A14:             ;         ALIGN
00000A14:             ; 
00000A14:             ; 
00000A14:             ; 
00000A14:             ; 
00000A14:             ; 
00000A14:             ; 
00000A14:             ; ; def main():
00000A14:             ; main
00000A14: E59F40B8    ;         LDR     R4, =&12345678          ; Test value - not part of python compilation
00000A18: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
00000A1C: E1A06004    ;         MOV     R6, R4
00000A20:             ; 
00000A20:             ; 
00000A20:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000A20:             ;         ;; LDR  R0, pDay
00000A20:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000A20:             ;         ;; LDR  R0, pMonth
00000A20:             ;         ;; PUSH {R0}                    ; Stack second parameter
00000A20:             ;         ;; LDR  R0, sYear
00000A20:             ;         ;; PUSH {R0}                    ; Stack third parameter
00000A20:             ; 
00000A20:             ; 
00000A20:             ; ;;; ;;;  Original above.
00000A20:             ;         
00000A20: E51F91AC    ;         LDR     R9, pDay
00000A24:             ;         
00000A24:             ;         ;; STMFD SP!, {R9}
00000A24:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000A24:             ;         
00000A24: E51F81AC    ;         LDR     R8, pMonth
00000A28:             ;         
00000A28:             ;         ;; STMFD SP!, {R8}
00000A28:             ;         ;; PUSH {R1}                    ; Stack second parameter
00000A28:             ;         
00000A28: E51F71A8    ;         LDR     R7, sYear
00000A2C:             ;         
00000A2C:             ;         ;; STMFD SP!, {R7}
00000A2C:             ;         ;; PUSH {R2}                    ; Stack third parameter
00000A2C:             ; 
00000A2C: E92D0380    ;         STMFD SP!, {R7-R9}
00000A30:             ; 
00000A30:             ;                 
00000A30:             ;         
00000A30:             ; ;for part 1
00000A30:             ; ;modify the above code (6 lines) to replace the three PUSH instructions with one STMFD instruct
                      ; ion
00000A30:             ; ; three parameters should be pushed to the stack with one STMFD instruction.
00000A30:             ; 
00000A30:             ; 
00000A30: EBFFFFA4    ;         BL      printAgeHistory
00000A34:             ; 
00000A34:             ; 
00000A34: E28DD034    ;         ADD SP, SP, #4*13
00000A38:             ;         
00000A38:             ; 
00000A38:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000A38:             ;         ;; POP  {R0}
00000A38:             ;         ;; POP  {R0}
00000A38:             ; 
00000A38:             ; ;for part 1
00000A38:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000A38:             ; 
00000A38:             ; 
00000A38:             ; 
00000A38:             ; ; print("Another person");
00000A38: E24F003C    ;         ADRL    R0, another
00000A3C: EF000003    ;         SVC     print_str
00000A40:             ; 
00000A40:             ; ; printAgeHistory(13, 11, 2000)
00000A40: E3A0900D    ;         MOV     R9, #13
00000A44:             ;         
00000A44:             ;         ;; PUSH {R0}                    ; Stack first parameter
00000A44:             ;         
00000A44: E3A0800B    ;         MOV     R8, #11
00000A48:             ;         
00000A48:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000A48:             ;         
00000A48: E3A07E7D    ;         MOV     R7, #2000
00000A4C:             ;         
00000A4C:             ;         ;; STR  R0, [SP, #-4]!          ; An explicit coding of PUSH
00000A4C:             ; 
00000A4C: E92D0380    ;         STMFD   SP!, {R7-R9}
00000A50:             ; 
00000A50:             ; ;for part 1
00000A50:             ; ;modify the above code (6 lines) to replace the three instructions (PUSH, STR and STR) with one
                      ;  STMFD instruction
00000A50:             ; ; three parameters shuld be pushed to the stack with one STMFD instruction.
00000A50:             ; 
00000A50:             ;         
00000A50: EBFFFF9C    ;         BL      printAgeHistory
00000A54:             ; 
00000A54: E28DD034    ;         ADD     SP, SP, #4*13
00000A58:             ;         
00000A58:             ; 
00000A58:             ; 
00000A58:             ;         ;; POP  {R0}                    ; Deallocate three 32-bit variables
00000A58:             ;         ;; POP  {R0}
00000A58:             ;         ;; POP  {R0}
00000A58:             ; 
00000A58:             ; ;for part 1
00000A58:             ; ;Replace the three POP instructions mentioned above with a single instruction that doesn't invo
                      ; lve memory access.
00000A58:             ; 
00000A58:             ; 
00000A58:             ; 
00000A58:             ;         ; Now check to see if register values intact (Not part of Java)
00000A58: E59F0074    ;         LDR     R0, =&12345678          ; Test value
00000A5C: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
00000A60: 01550000    ;         CMPEQ   R5, R0                  ;
00000A64: 01560000    ;         CMPEQ   R6, R0                  ;
00000A68:             ; 
00000A68: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000A6C: 1F000003    ;         SVCNE   print_str               ;
00000A70:             ; 
00000A70:             ; 
00000A70:             ;         
00000A70: E24F0E27    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
00000A74: E15D0000    ;         CMP     SP, R0                  ;
00000A78:             ; 
00000A78:             ;         ;; CMP  SP, #_stack             ; Have you balanced pushes & pops?
00000A78:             ;                                         ; [hardcoded version]
00000A78:             ; 
00000A78:             ; 
00000A78:             ;         
00000A78: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000A7C: 1F000003    ;         SVCNE   print_str               ; End of test code
00000A80:             ; 
00000A80:             ; ; }// end of main
00000A80: EF000002    ;         SVC     stop
00000A84:             ; 
00000A84:             ; 
00000A84: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
00000A88: 42 55 54 20 ; 
00000A8C: 59 4F 55 20 ; 
00000A90: 43 4F 52 52 ; 
00000A94: 55 50 54 45 ; 
00000A98: 44 20 52 45 ; 
00000A9C: 47 49 53 54 ; 
00000AA0: 45 52 53 21 ; 
00000AA4: 20 20 2A 2A ; 
00000AA8: 0A 00       ; 
00000AAA: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
00000AAE: 42 55 54 20 ; 
00000AB2: 59 4F 55 52 ; 
00000AB6: 20 53 54 41 ; 
00000ABA: 43 4B 20 44 ; 
00000ABE: 49 44 4E 27 ; 
00000AC2: 54 20 42 41 ; 
00000AC6: 4C 41 4E 43 ; 
00000ACA: 45 21 20 20 ; 
00000ACE: 2A 2A 0A 00 ; 
00000AD2:             ; 
00000AD2: 00 00       ; (padding)
00000AD4: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            00000808  Local -- ARM
: wasborn                           00000808  Local -- ARM
: was                               00000821  Local -- ARM
: on                                00000832  Local -- ARM
: is                                00000837  Local -- ARM
: today                             0000085C  Local -- ARM
: willbe                            00000864  Local -- ARM
: pDay                              0000087C  Local -- ARM
: pMonth                            00000880  Local -- ARM
: pYear                             00000884  Local -- ARM
: sYear                             00000888  Local -- ARM
: printTheDate                      0000088C  Local -- ARM
: printAgeHistory                   000008C8  Local -- ARM
: loop1                             0000091C  Local -- ARM
: end1                              00000980  Local -- ARM
: else1                             000009B4  Local -- ARM
: end2                              000009FC  Local -- ARM
: another                           00000A04  Local -- ARM
: main                              00000A14  Local -- ARM
: whoops1                           00000A84  Local -- ARM
: whoops2                           00000AAA  Local -- ARM
